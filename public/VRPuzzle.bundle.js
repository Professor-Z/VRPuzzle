!function(e){function t(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=u.p+""+e+"."+m+".hot-update.js",t.appendChild(n)}function n(e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var t=new XMLHttpRequest,n=u.p+""+m+".hot-update.json";t.open("GET",n,!0),t.timeout=1e4,t.send(null)}catch(i){return e(i)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)e(new Error("Manifest request to "+n+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)e(new Error("Manifest request to "+n+" failed."));else{try{var i=JSON.parse(t.responseText)}catch(r){return void e(r)}e(null,i)}}}function i(e){function t(e,t){"ready"===R&&s("prepare"),O++,u.e(e,function(){function n(){O--,"prepare"===R&&(_[e]||d(e),0===O&&0===T&&l())}try{t.call(null,i)}finally{n()}})}var n=k[e];if(!n)return u;var i=function(t){return n.hot.active?k[t]?(k[t].parents.indexOf(e)<0&&k[t].parents.push(e),n.children.indexOf(t)<0&&n.children.push(t)):x=[e]:(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),x=[]),u(t)};for(var r in u)Object.prototype.hasOwnProperty.call(u,r)&&(p?Object.defineProperty(i,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return u[e]},set:function(t){u[e]=t}}}(r)):i[r]=u[r]);return p?Object.defineProperty(i,"e",{enumerable:!0,value:t}):i.e=t,i}function r(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(e,n){if("undefined"==typeof e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n;else t._acceptedDependencies[e]=n},decline:function(e){if("undefined"==typeof e)t._selfDeclined=!0;else if("number"==typeof e)t._declinedDependencies[e]=!0;else for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:o,apply:h,status:function(e){return e?void H.push(e):R},addStatusHandler:function(e){H.push(e)},removeStatusHandler:function(e){var t=H.indexOf(e);t>=0&&H.splice(t,1)},data:E[e]};return t}function s(e){R=e;for(var t=0;t<H.length;t++)H[t].call(null,e)}function a(e){var t=+e+""===e;return t?+e:e}function o(e,t){if("idle"!==R)throw new Error("check() is only allowed in idle status");"function"==typeof e?(b=!1,t=e):(b=e,t=t||function(e){if(e)throw e}),s("check"),n(function(e,n){if(e)return t(e);if(!n)return s("idle"),void t(null,null);S={},P={},_={};for(var i=0;i<n.c.length;i++)P[n.c[i]]=!0;g=n.h,s("prepare"),w=t,y={};var r=0;d(r),"prepare"===R&&0===O&&0===T&&l()})}function c(e,t){if(P[e]&&S[e]){S[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0===--T&&0===O&&l()}}function d(e){P[e]?(S[e]=!0,T++,t(e)):_[e]=!0}function l(){s("ready");var e=w;if(w=null,e)if(b)h(b,e);else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(a(n));e(null,t)}}function h(t,n){function i(e){for(var t=[e],n={},i=t.slice();i.length>0;){var s=i.pop(),e=k[s];if(e&&!e.hot._selfAccepted){if(e.hot._selfDeclined)return new Error("Aborted because of self decline: "+s);if(0===s)return;for(var a=0;a<e.parents.length;a++){var o=e.parents[a],c=k[o];if(c.hot._declinedDependencies[s])return new Error("Aborted because of declined dependency: "+s+" in "+o);t.indexOf(o)>=0||(c.hot._acceptedDependencies[s]?(n[o]||(n[o]=[]),r(n[o],[s])):(delete n[o],t.push(o),i.push(o)))}}}return[t,n]}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];e.indexOf(i)<0&&e.push(i)}}if("ready"!==R)throw new Error("apply() is only allowed in ready status");"function"==typeof t?(n=t,t={}):t&&"object"==typeof t?n=n||function(e){if(e)throw e}:(t={},n=n||function(e){if(e)throw e});var o={},c=[],d={};for(var l in y)if(Object.prototype.hasOwnProperty.call(y,l)){var h=a(l),f=i(h);if(!f){if(t.ignoreUnaccepted)continue;return s("abort"),n(new Error("Aborted because "+h+" is not accepted"))}if(f instanceof Error)return s("abort"),n(f);d[h]=y[h],r(c,f[0]);for(var h in f[1])Object.prototype.hasOwnProperty.call(f[1],h)&&(o[h]||(o[h]=[]),r(o[h],f[1][h]))}for(var p=[],v=0;v<c.length;v++){var h=c[v];k[h]&&k[h].hot._selfAccepted&&p.push({module:h,errorHandler:k[h].hot._selfAccepted})}s("dispose");for(var w=c.slice();w.length>0;){var h=w.pop(),b=k[h];if(b){for(var H={},T=b.hot._disposeHandlers,O=0;O<T.length;O++){var _=T[O];_(H)}E[h]=H,b.hot.active=!1,delete k[h];for(var O=0;O<b.children.length;O++){var S=k[b.children[O]];if(S){var P=S.parents.indexOf(h);P>=0&&S.parents.splice(P,1)}}}}for(var h in o)if(Object.prototype.hasOwnProperty.call(o,h))for(var b=k[h],M=o[h],O=0;O<M.length;O++){var j=M[O],P=b.children.indexOf(j);P>=0&&b.children.splice(P,1)}s("apply"),m=g;for(var h in d)Object.prototype.hasOwnProperty.call(d,h)&&(e[h]=d[h]);var z=null;for(var h in o)if(Object.prototype.hasOwnProperty.call(o,h)){for(var b=k[h],M=o[h],D=[],v=0;v<M.length;v++){var j=M[v],_=b.hot._acceptedDependencies[j];D.indexOf(_)>=0||D.push(_)}for(var v=0;v<D.length;v++){var _=D[v];try{_(o)}catch(W){z||(z=W)}}}for(var v=0;v<p.length;v++){var A=p[v],h=A.module;x=[h];try{u(h)}catch(W){if("function"==typeof A.errorHandler)try{A.errorHandler(W)}catch(W){z||(z=W)}else z||(z=W)}}return z?(s("fail"),n(z)):(s("idle"),void n(null,c))}function u(t){if(k[t])return k[t].exports;var n=k[t]={exports:{},id:t,loaded:!1,hot:r(t),parents:x,children:[]};return e[t].call(n.exports,n,n.exports,i(t)),n.loaded=!0,n.exports}var f=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){c(e,t),f&&f(e,t)};var p=!1;try{Object.defineProperty({},"x",{get:function(){}}),p=!0}catch(v){}var w,y,g,b=!0,m="fa07c683ab7f537c1954",E={},x=[],H=[],R="idle",T=0,O=0,_={},S={},P={},k={};return u.m=e,u.c=k,u.p="/public/",u.h=function(){return m},i(0)(0)}([function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=n(1),s=i(r),a=new s["default"],o=function(){a.render()};o()},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=n(2),o=(i(a),function(){function e(){r(this,e),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),document.body.appendChild(this.renderer.domElement),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.controls=new THREE.VRControls(this.camera),this.controls.standing=!0,this.effect=new THREE.VREffect(this.renderer),this.effect.setSize(window.innerWidth,window.innerHeight);var t={hideButton:!1,isUndistorted:!1};this.manager=new WebVRManager(this.renderer,this.effect,t),this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.setupStage=this.setupStage.bind(this),this.setStageDimensions=this.setStageDimensions.bind(this),this.placePieces=this.placePieces.bind(this),this.boxSize=20,this.loader=new THREE.TextureLoader,this.loader.load("public/images/box.png",this.onTextureLoaded),window.addEventListener("resize",this.onResize,!0),window.addEventListener("vrdisplaypresentchange",this.onResize,!0),this.lastRender=0,this.display=null}return s(e,[{key:"onTextureLoaded",value:function(e){e.wrapS=THREE.RepeatWrapping,e.wrapT=THREE.RepeatWrapping,e.repeat.set(this.boxSize,this.boxSize);var t=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),n=new THREE.MeshBasicMaterial({map:e,color:"rgba(255,255,255,1)",side:THREE.BackSide});this.skybox=new THREE.Mesh(t,n),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox);var i=new THREE.PlaneGeometry(2,1),r=new THREE.Mesh(i,n);r.position.set(0,2.5,-1.999),this.scene.add(r),this.placePieces(),this.setupStage()}},{key:"placePieces",value:function(){this.img=document.getElementById("img1"),this.imgWidth=this.img.width,this.imgHeight=this.img.height,this.columnNumber=4,this.pieceWidth=this.pieceHeight=this.imgWidth/this.columnNumber,this.rowNumber=this.imgHeight/this.pieceWidth;var e=document.createElement("canvas"),t=e.getContext("2d");t.font="Bold 40px Arial",t.fillStyle="rgba(255,255,255,0.95)",t.fillText("Hello, world!",50,50);var i=new THREE.Texture(e);i.needsUpdate=!0;var r=new THREE.MeshBasicMaterial({map:i,side:THREE.DoubleSide}),s=new THREE.Mesh(new THREE.PlaneGeometry(10,5),r);s.position.set(0,2,9),this.scene.add(s);var a=document.createElement("canvas"),o=a.getContext("2d"),c=new THREE.Texture(a),d=new Image;d.src=n(3),console.log(a.width,a.height),console.log(this.img.src);var l=a.width/1.5/d.width,h=a.height/1.5/d.height;this.scale=Math.min(l,h),o.scale(this.scale,this.scale),d.onload=function(){o.drawImage(d,d.width,d.height),c&&(c.needsUpdate=!0)};var u=new THREE.MeshBasicMaterial({map:c,side:THREE.DoubleSide});u.transparent=!0;var f=new THREE.Mesh(new THREE.PlaneGeometry(20,20),u);f.position.set(0,8,-9.9),this.scene.add(f)}},{key:"render",value:function(e){this.lastRender=e,this.controls.update(),this.manager.render(this.scene,this.camera,e),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.effect.setSize(window.innerWidth,window.innerHeight),this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix()}},{key:"setStageDimensions",value:function(e){var t=this.skybox.material;this.scene.remove(this.skybox);var n=new THREE.BoxGeometry(e.sizeX,this.boxSize,e.sizeZ);this.skybox=new THREE.Mesh(n,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox)}},{key:"setupStage",value:function(){var e=this;navigator.getVRDisplays().then(function(t){t.length>0&&(e.display=t[0],e.display.stageParameters&&e.setStageDimensions(e.display.stageParameters))})}}]),e}());t["default"]=o},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(t,i,r,s,a,o){n(this,e),this.img=t,this.x=i,this.y=r,this.width=s,this.height=a,this.canvas=o,this.canvas.width=400,this.canvas.height=300,this.context=this.canvas.getContext("2d")}return i(e,[{key:"draw",value:function(){console.log(this.img,this.x,this.y,this.width,this.height,0,0,this.canvas.width,this.canvas.height),this.context.fillStyle="rgba(255,255,255,1)",this.context.fillRect(0,0,400,300)}}]),e}();t["default"]=r},function(e,t,n){e.exports=n.p+"images/puzzles/cartoon (1).jpg"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,