!function(e){function t(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var i={};return t.m=e,t.c=i,t.p="/VRPuzzle/public/",t(0)}([function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var s=i(1),r=n(s),o=new r["default"],a=function(){o.render()};a()},function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=i(2),a=n(o),h=i(4),c=n(h),l=function(){function e(){s(this,e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.set(0,10,0),this.controls=new THREE.DeviceOrientationControls(this.camera),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top=0,document.body.appendChild(this.renderer.domElement),this.raycaster=new THREE.Raycaster,this.mouse=new a["default"],this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.placePieces=this.placePieces.bind(this),this.meshList=[],this.logFlag=!0,this.boxSize=30,this.onTextureLoaded(),window.addEventListener("resize",this.onResize,!0),this.lastRender=0,this.display=null}return r(e,[{key:"onTextureLoaded",value:function(){var e=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),t=new THREE.MeshBasicMaterial({color:16711935,side:THREE.BackSide,wireframe:!0});this.skybox=new THREE.Mesh(e,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox),this.placePieces(),this.placeSphere()}},{key:"placeSphere",value:function(){var e=new THREE.SphereGeometry(50,16,8);e.scale(-1,1,1);var t=new THREE.TextureLoader,i=this;t.load("public/images/sphere (2).jpg",function(t){var n=new THREE.MeshBasicMaterial({map:t}),s=new THREE.Mesh(e,n);s.position.set(0,0,10),i.scene.add(s)})}},{key:"placePieces",value:function(){this.columnNumber=4,this.pieceNumber=this.columnNumber*this.columnNumber,this.scaledWidth=16,this.scaledHeight=9,this.freePieceNumber=1*this.pieceNumber/2,this.freePieceList=[],this.planeWidth=this.scaledWidth/this.columnNumber,this.planeHeight=this.scaledHeight/this.columnNumber,this.selectedMesh=null,this.holdMap={},this.meshCanvasMap={};var e=new Image;e.src=i(3);var t=document.createElement("canvas"),n=t.getContext("2d"),s=this;e.onload=function(){var i=t.width/1.5/e.width,r=t.height/1.5/e.height;s.scale=Math.min(i,r),s.pieceWidth=e.width/s.columnNumber,s.pieceHeight=e.height/s.columnNumber;for(var o,a,h,c=0,l=0;c<s.columnNumber;c++)for(var d=0;d<s.columnNumber;d++,l++){t=document.createElement("canvas"),n=t.getContext("2d"),o=new THREE.Texture(t),n.drawImage(e,c*s.pieceWidth,d*s.pieceHeight,s.pieceWidth,s.pieceHeight,0,0,t.width,t.height),o&&(o.needsUpdate=!0),a=new THREE.MeshBasicMaterial({map:o,side:THREE.DoubleSide}),a.transparent=!1,h=new THREE.Mesh(new THREE.PlaneGeometry(s.planeWidth,s.planeHeight),a);var u=Math.random();if(u<s.freePieceNumber/(s.columnNumber*s.columnNumber-l)&&s.freePieceNumber>0){var p=-s.boxSize/2+s.planeWidth/2+Math.random()*(s.boxSize-s.planeWidth),m=-s.boxSize/2+s.planeHeight/2+Math.random()*(s.boxSize-s.planeHeight);h.rotation.x=Math.PI/2,h.position.set(Math.round(p),.5,Math.round(m));var f=h.clone();s.holdMap[h.id]=f,f.rotation.x=0,f.material=new THREE.MeshBasicMaterial({color:8421504,side:THREE.DoubleSide}),f.position.set(c*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-d*s.planeHeight,-9.99),s.scene.add(f),s.freePieceNumber--,s.freePieceList.push(h.id),s.meshCanvasMap[h.id]=t}else h.position.set(c*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-d*s.planeHeight,-9.99);s.meshList.push(h),s.scene.add(h)}}}},{key:"render",value:function(e){this.lastRender=e,this.raycaster.setFromCamera(this.mouse,this.camera);var t=this.raycaster.intersectObjects(this.scene.children);if(this.mouse.x=this.mouse.y=void 0,t.length>0){var i=!1,n=!0,s=!1,r=void 0;try{for(var o,a=this.meshList[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){var h=o.value;this.freePieceList.indexOf(h.id)>-1&&h.id==t[0].object.id&&(console.log(1),null!==this.selectedMesh&&(this.clearCanvas(),this.selectedMesh.visible=!0),this.selectedMesh=h,console.log(2),this.mouse.pickBtn.innerHTML="贴上",i=!0,h.visible=!1,document.getElementById("pin").appendChild(this.meshCanvasMap[h.id]),console.log(3))}}catch(l){s=!0,r=l}finally{try{!n&&a["return"]&&a["return"]()}finally{if(s)throw r}}if(this.selectedMesh&&this.holdMap[this.selectedMesh.id].id==t[0].object.id){var d=t[0].object.position;this.selectedMesh.position.set(d.x,d.y,d.z),this.selectedMesh.rotation.set(0,0,0),this.holdMap[this.selectedMesh.id].position.z-=1,this.selectedMesh.visible=!0,this.mouse.pickBtn.innerHTML="捡起",this.freePieceList.splice(this.freePieceList.indexOf(this.selectedMesh.id),1),this.clearCanvas(),this.selectedMesh=null,0==this.freePieceList.length&&(0,c["default"])({title:"恭喜！",text:"成功拼完了一张图，可是我也不会给你流量",confirmButtonText:"好的"})}this.selectedMesh&&!i&&(this.mouse.pickBtn.innerHTML="捡起",this.selectedMesh.visible=!0,this.clearCanvas(),this.selectedMesh=null)}this.controls.update(),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}},{key:"clearCanvas",value:function(){for(var e=document.querySelector("#pin canvas"),t=document.getElementById("pin");null!=e;)t.removeChild(e),e=document.querySelector("#pin canvas")}}]),e}();t["default"]=l},function(e,t){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=function(e){function t(e){i(this,t);var s=n(this,Object.getPrototypeOf(t).call(this,e));return s.x=void 0,s.y=void 0,s.pickBtn=document.getElementById("pick-btn"),s.pickHand=document.getElementById("pick-hand"),s.pickBtn.addEventListener("click",s.btnOnClick.bind(s),!1),s}return s(t,e),r(t,[{key:"onMouseClick",value:function(e){this.x=e.clientX/window.innerWidth*2-1,this.y=2*-(e.clientY/window.innerHeight)+1}},{key:"btnOnClick",value:function(e){this.x=.92-1,this.y=-.79+1}}]),t}(THREE.Vector2);t["default"]=o},function(e,t,i){e.exports=i.p+"images/puzzles/cartoon (3).jpg"},function(e,t){e.exports=swal}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVlJQdXp6bGUuYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBiNzQ4NDYzY2Q5MTlkZTllMDcyMSIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL21vdXNlLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9pbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGciLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3dhbFwiIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nYW1lIiwiX2dhbWUyIiwiZ2FtZSIsImxvb3AiLCJyZW5kZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX21vdXNlIiwiX21vdXNlMiIsIl9zd2VldGFsZXJ0IiwiX3N3ZWV0YWxlcnQyIiwiR2FtZSIsInRoaXMiLCJzY2VuZSIsIlRIUkVFIiwiU2NlbmUiLCJjYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwic2V0IiwiY29udHJvbHMiLCJEZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzIiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzZXRTaXplIiwiZG9tRWxlbWVudCIsInN0eWxlIiwidG9wIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJyYXljYXN0ZXIiLCJSYXljYXN0ZXIiLCJtb3VzZSIsIm9uVGV4dHVyZUxvYWRlZCIsImJpbmQiLCJvblJlc2l6ZSIsInBsYWNlUGllY2VzIiwibWVzaExpc3QiLCJsb2dGbGFnIiwiYm94U2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJsYXN0UmVuZGVyIiwiZGlzcGxheSIsImdlb21ldHJ5IiwiQm94R2VvbWV0cnkiLCJtYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiY29sb3IiLCJzaWRlIiwiQmFja1NpZGUiLCJ3aXJlZnJhbWUiLCJza3lib3giLCJNZXNoIiwieSIsImFkZCIsInBsYWNlU3BoZXJlIiwiU3BoZXJlR2VvbWV0cnkiLCJzY2FsZSIsImxvYWRlciIsIlRleHR1cmVMb2FkZXIiLCJzZWxmIiwibG9hZCIsInRleHR1cmUiLCJtYXAiLCJtZXNoIiwiY29sdW1uTnVtYmVyIiwicGllY2VOdW1iZXIiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsImZyZWVQaWVjZU51bWJlciIsImZyZWVQaWVjZUxpc3QiLCJwbGFuZVdpZHRoIiwicGxhbmVIZWlnaHQiLCJzZWxlY3RlZE1lc2giLCJob2xkTWFwIiwibWVzaENhbnZhc01hcCIsImltYWdlT2JqIiwiSW1hZ2UiLCJzcmMiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJvbmxvYWQiLCJ3cyIsIndpZHRoIiwiaHMiLCJoZWlnaHQiLCJNYXRoIiwibWluIiwicGllY2VXaWR0aCIsInBpZWNlSGVpZ2h0IiwiaW5kZXgiLCJqIiwiVGV4dHVyZSIsImRyYXdJbWFnZSIsIm5lZWRzVXBkYXRlIiwiRG91YmxlU2lkZSIsInRyYW5zcGFyZW50IiwiUGxhbmVHZW9tZXRyeSIsInJhbmRvbSIsIngiLCJ6Iiwicm90YXRpb24iLCJQSSIsInJvdW5kIiwiYmxhbmtNZXNoIiwiY2xvbmUiLCJwdXNoIiwidGltZXN0YW1wIiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwiY2hpbGRyZW4iLCJ1bmRlZmluZWQiLCJjbGlja0ZsYWciLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImluZGV4T2YiLCJvYmplY3QiLCJjb25zb2xlIiwibG9nIiwiY2xlYXJDYW52YXMiLCJ2aXNpYmxlIiwicGlja0J0biIsImlubmVySFRNTCIsImdldEVsZW1lbnRCeUlkIiwiZXJyIiwidCIsInNwbGljZSIsInRpdGxlIiwidGV4dCIsImNvbmZpcm1CdXR0b25UZXh0IiwidXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJxdWVyeVNlbGVjdG9yIiwicGluIiwicmVtb3ZlQ2hpbGQiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIk1vdXNlIiwiX1RIUkVFJFZlY3RvciIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJwaWNrSGFuZCIsImJ0bk9uQ2xpY2siLCJldmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiVmVjdG9yMiIsInN3YWwiXSwi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LElBQWlCLE1BQU8sVUFBVVgsRUFBYWdCLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZVixFQUFpQk4sRUFBWWtCLFVBQVdGLEdBQWlCQyxHQUFhWCxFQUFpQk4sRUFBYWlCLEdBQXFCakIsTUlqWDVnQmdMLEVKeVhSLFNBQVVDLEdJeFhuQixRQUFBRCxHQUFZeEssR0FBTVYsRUFBQTBCLEtBQUF3SixFQUFBLElBQUFFLEdBQUFYLEVBQUEvSSxLQUFBdEIsT0FBQWlMLGVBQUFILEdBQUEvTCxLQUFBdUMsS0FDUmhCLEdBRFEsT0FFZDBLLEdBQUsxRCxFQUFJYSxPQUNUNkMsRUFBSzFHLEVBQUk2RCxPQUVUNkMsRUFBSzVCLFFBQVV4RyxTQUFTMEcsZUFBZSxZQUN2QzBCLEVBQUtFLFNBQVd0SSxTQUFTMEcsZUFBZSxhQUN4QzBCLEVBQUs1QixRQUFRM0YsaUJBQWlCLFFBQVF1SCxFQUFLRyxXQUFXaEksS0FBaEI2SCxPQVB4QkEsRUo2WmpCLE1BcENBVCxHQUFVTyxFQUFPQyxHQWlCakI1SyxFQUFhMkssSUFDVGpLLElBQUssZUFDTFgsTUFBTyxTSWxZRWtMLEdBSVY5SixLQUFLZ0csRUFBTThELEVBQU1DLFFBQVV6SixPQUFPQyxXQUFlLEVBQUksRUFDckRQLEtBQUtnRCxFQUErQyxJQUF2QzhHLEVBQU1FLFFBQVUxSixPQUFPRSxhQUFvQixLSnNZdkRqQixJQUFLLGFBQ0xYLE1BQU8sU0lwWUFrTCxHQUNSOUosS0FBS2dHLEVBQU0sSUFBYSxFQUN4QmhHLEtBQUtnRCxPQUFzQixNSnlZdkJ3RyxHSTladUJ0SixNQUFNK0osUUppYXhDNU0sY0lqYW9CbU0sR0pxYWYsU0FBU2xNLEVBQVFELEVBQVNILEdLcmFoQ0ksRUFBQUQsUUFBQUgsRUFBQVUsRUFBQSxrQ0wyYU0sU0FBU04sRUFBUUQsR00zYXZCQyxFQUFBRCxRQUFBNk0iLCJmaWxlIjoiVlJQdXp6bGUuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1ZSUHV6emxlL3B1YmxpYy9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9nYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfZ2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW1lKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgZ2FtZSA9IG5ldyBfZ2FtZTIuZGVmYXVsdCgpO1xuXHRcblx0dmFyIGxvb3AgPSBmdW5jdGlvbiBsb29wKCkge1xuXHQgICAgZ2FtZS5yZW5kZXIoKTtcblx0ICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuXHR9O1xuXHRsb29wKCk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9tb3VzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX21vdXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vdXNlKTtcblx0XG5cdHZhciBfc3dlZXRhbGVydCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX3N3ZWV0YWxlcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3dlZXRhbGVydCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBHYW1lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gR2FtZSgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2FtZSk7XG5cdFxuXHQgICAgICAgIC8vIENyZWF0ZSBhIHRocmVlLmpzIHNjZW5lLlxuXHQgICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblx0XG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgdGhyZWUuanMgY2FtZXJhLlxuXHQgICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwMCk7XG5cdFxuXHQgICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAxMCwgMCk7XG5cdCAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBUSFJFRS5EZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzKHRoaXMuY2FtZXJhKTtcblx0XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcblx0ICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gMDtcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cdFxuXHQgICAgICAgIC8vIHJheWNhc3RlclxuXHQgICAgICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xuXHQgICAgICAgIHRoaXMubW91c2UgPSBuZXcgX21vdXNlMi5kZWZhdWx0KCk7XG5cdCAgICAgICAgLy9iaW5kIHRoaXNcblx0ICAgICAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZCA9IHRoaXMub25UZXh0dXJlTG9hZGVkLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5wbGFjZVBpZWNlcyA9IHRoaXMucGxhY2VQaWVjZXMuYmluZCh0aGlzKTtcblx0ICAgICAgICAvL1xuXHQgICAgICAgIHRoaXMubWVzaExpc3QgPSBbXTtcblx0ICAgICAgICB0aGlzLmxvZ0ZsYWcgPSB0cnVlO1xuXHQgICAgICAgIC8vIEFkZCBhIHJlcGVhdGluZyBncmlkIGFzIGEgc2t5Ym94LlxuXHQgICAgICAgIHRoaXMuYm94U2l6ZSA9IDMwO1xuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyLmxvYWQoXCJwdWJsaWMvaW1hZ2VzL2JveC5wbmdcIiwgdGhpcy5vblRleHR1cmVMb2FkZWQpXG5cdCAgICAgICAgLy8gbGV0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpXG5cdCAgICAgICAgdGhpcy5vblRleHR1cmVMb2FkZWQoKTtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB0cnVlKTtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInZyZGlzcGxheXByZXNlbnRjaGFuZ2VcIiwgdGhpcy5vblJlc2l6ZSwgdHJ1ZSlcblx0ICAgICAgICB0aGlzLmxhc3RSZW5kZXIgPSAwO1xuXHQgICAgICAgIHRoaXMuZGlzcGxheSA9IG51bGw7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEdhbWUsIFt7XG5cdCAgICAgICAga2V5OiBcIm9uVGV4dHVyZUxvYWRlZFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRleHR1cmVMb2FkZWQoKSB7XG5cdCAgICAgICAgICAgIC8vIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZ1xuXHQgICAgICAgICAgICAvLyB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcblx0ICAgICAgICAgICAgLy8gdGV4dHVyZS5yZXBlYXQuc2V0KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplKVxuXHRcblx0ICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUpO1xuXHQgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjAwZmYsIHNpZGU6IFRIUkVFLkJhY2tTaWRlLCB3aXJlZnJhbWU6IHRydWUgfSk7XG5cdFxuXHQgICAgICAgICAgICAvLyBBbGlnbiB0aGUgc2t5Ym94IHRvIHRoZSBmbG9vciAod2hpY2ggaXMgYXQgeT0wKS5cblx0ICAgICAgICAgICAgdGhpcy5za3lib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuXHQgICAgICAgICAgICB0aGlzLnNreWJveC5wb3NpdGlvbi55ID0gdGhpcy5ib3hTaXplIC8gMjtcblx0ICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5za3lib3gpO1xuXHQgICAgICAgICAgICB0aGlzLnBsYWNlUGllY2VzKCk7XG5cdCAgICAgICAgICAgIHRoaXMucGxhY2VTcGhlcmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBsYWNlU3BoZXJlXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlU3BoZXJlKCkge1xuXHQgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoNTAsIDE2LCA4KTtcblx0ICAgICAgICAgICAgZ2VvbWV0cnkuc2NhbGUoLTEsIDEsIDEpO1xuXHQgICAgICAgICAgICAvLyBnZW9tZXRyeS5zY2FsZSggLSAxLCAxLCAxICk7XG5cdCAgICAgICAgICAgIC8vIHZhciBzcGhlcmUgPSByZXF1aXJlKFwiLi4vLi4vcHVibGljL2ltYWdlcy9zcGhlcmUgKDIpLmpwZ1wiKVxuXHQgICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcblx0ICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICAgICAgICBsb2FkZXIubG9hZChcInB1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIiwgZnVuY3Rpb24gKHRleHR1cmUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdCAgICAgICAgICAgICAgICAgICAgbWFwOiB0ZXh0dXJlXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5cdCAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtZXNoKVxuXHQgICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoMCwgMCwgMTApO1xuXHQgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQobWVzaCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwicGxhY2VQaWVjZXNcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGxhY2VQaWVjZXMoKSB7XG5cdFxuXHQgICAgICAgICAgICB0aGlzLmNvbHVtbk51bWJlciA9IDQ7XG5cdCAgICAgICAgICAgIHRoaXMucGllY2VOdW1iZXIgPSB0aGlzLmNvbHVtbk51bWJlciAqIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnNjYWxlZFdpZHRoID0gMTY7XG5cdCAgICAgICAgICAgIHRoaXMuc2NhbGVkSGVpZ2h0ID0gOTtcblx0ICAgICAgICAgICAgdGhpcy5mcmVlUGllY2VOdW1iZXIgPSB0aGlzLnBpZWNlTnVtYmVyICogMSAvIDI7XG5cdCAgICAgICAgICAgIHRoaXMuZnJlZVBpZWNlTGlzdCA9IFtdO1xuXHQgICAgICAgICAgICB0aGlzLnBsYW5lV2lkdGggPSB0aGlzLnNjYWxlZFdpZHRoIC8gdGhpcy5jb2x1bW5OdW1iZXI7XG5cdCAgICAgICAgICAgIHRoaXMucGxhbmVIZWlnaHQgPSB0aGlzLnNjYWxlZEhlaWdodCAvIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7IC8vdGhlIGxhc3QgY2xpY2tlZCBtZXNoSWRcblx0ICAgICAgICAgICAgdGhpcy5ob2xkTWFwID0ge307XG5cdCAgICAgICAgICAgIHRoaXMubWVzaENhbnZhc01hcCA9IHt9O1xuXHQgICAgICAgICAgICAvLyB0aGlzLlxuXHQgICAgICAgICAgICAvLyBsb2FkIGFuIGltYWdlXG5cdCAgICAgICAgICAgIHZhciBpbWFnZU9iaiA9IG5ldyBJbWFnZSgpO1xuXHQgICAgICAgICAgICBpbWFnZU9iai5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHQgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblx0ICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcblx0ICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5waWVjZVdpZHRoLHRoaXMucGllY2VIZWlnaHQpXG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgICAgICAgaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHdzID0gY2FudmFzLndpZHRoIC8gMS41IC8gaW1hZ2VPYmoud2lkdGg7XG5cdCAgICAgICAgICAgICAgICB2YXIgaHMgPSBjYW52YXMuaGVpZ2h0IC8gMS41IC8gaW1hZ2VPYmouaGVpZ2h0O1xuXHQgICAgICAgICAgICAgICAgc2VsZi5zY2FsZSA9IE1hdGgubWluKHdzLCBocyk7XG5cdCAgICAgICAgICAgICAgICBzZWxmLnBpZWNlV2lkdGggPSBpbWFnZU9iai53aWR0aCAvIHNlbGYuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgc2VsZi5waWVjZUhlaWdodCA9IGltYWdlT2JqLmhlaWdodCAvIHNlbGYuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGluZGV4ID0gMCwgdGV4dHVyZSwgbWF0ZXJpYWwsIG1lc2g7IGkgPCBzZWxmLmNvbHVtbk51bWJlcjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmNvbHVtbk51bWJlcjsgaisrLCBpbmRleCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoY2FudmFzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2VPYmosIGkgKiBzZWxmLnBpZWNlV2lkdGgsIGogKiBzZWxmLnBpZWNlSGVpZ2h0LCBzZWxmLnBpZWNlV2lkdGgsIHNlbGYucGllY2VIZWlnaHQsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlKSAvLyBjaGVja3MgaWYgdGV4dHVyZSBleGlzdHNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiB0ZXh0dXJlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBmYWxzZTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzZWxmLnBsYW5lV2lkdGgsIHNlbGYucGxhbmVIZWlnaHQpLCBtYXRlcmlhbCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmRvbSA8IHNlbGYuZnJlZVBpZWNlTnVtYmVyIC8gKHNlbGYuY29sdW1uTnVtYmVyICogc2VsZi5jb2x1bW5OdW1iZXIgLSBpbmRleCkgJiYgc2VsZi5mcmVlUGllY2VOdW1iZXIgPiAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IC1zZWxmLmJveFNpemUgLyAyICsgc2VsZi5wbGFuZVdpZHRoIC8gMiArIE1hdGgucmFuZG9tKCkgKiAoc2VsZi5ib3hTaXplIC0gc2VsZi5wbGFuZVdpZHRoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB6ID0gLXNlbGYuYm94U2l6ZSAvIDIgKyBzZWxmLnBsYW5lSGVpZ2h0IC8gMiArIE1hdGgucmFuZG9tKCkgKiAoc2VsZi5ib3hTaXplIC0gc2VsZi5wbGFuZUhlaWdodCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KE1hdGgucm91bmQoeCksIDAuNSwgTWF0aC5yb3VuZCh6KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxhbmtNZXNoID0gbWVzaC5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob2xkTWFwW21lc2guaWRdID0gYmxhbmtNZXNoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxhbmtNZXNoLnJvdGF0aW9uLnggPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxhbmtNZXNoLm1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogMHg4MDgwODAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gucG9zaXRpb24uc2V0KGkgKiBzZWxmLnBsYW5lV2lkdGggLSBzZWxmLnNjYWxlZFdpZHRoIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIsIDUgKyBzZWxmLnNjYWxlZEhlaWdodCAtIHNlbGYucGxhbmVIZWlnaHQgLyAyIC0gaiAqIHNlbGYucGxhbmVIZWlnaHQsIC05Ljk5KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2NlbmUuYWRkKGJsYW5rTWVzaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZyZWVQaWVjZU51bWJlci0tO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcmVlUGllY2VMaXN0LnB1c2gobWVzaC5pZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc2hDYW52YXNNYXBbbWVzaC5pZF0gPSBjYW52YXM7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChpICogc2VsZi5wbGFuZVdpZHRoIC0gc2VsZi5zY2FsZWRXaWR0aCAvIDIgKyBzZWxmLnBsYW5lV2lkdGggLyAyLCA1ICsgc2VsZi5zY2FsZWRIZWlnaHQgLSBzZWxmLnBsYW5lSGVpZ2h0IC8gMiAtIGogKiBzZWxmLnBsYW5lSGVpZ2h0LCAtOS45OSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVzaC5wb3NpdGlvbi5zZXQoMCwgMiwtOSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNoTGlzdC5wdXNoKG1lc2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNjZW5lLmFkZChtZXNoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codHlwZW9mIHRoaXMuc2NlbmUpXG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAvLyBzd2FsKHtcblx0ICAgICAgICAgICAgLy8gICAgIHRpdGxlOiBcIuaPkOekulwiLFxuXHQgICAgICAgICAgICAvLyAgICAgdGV4dDogXCLmiorlsY/luZXkuK3lpK7nmoTlsI/miYvlr7nlh4blnLDkuIrnmoTlm77niYfvvIzngrnlh7vmjInpkq7mjaHotbfvvIzlho3miorlm77niYflr7nlh4bljp/lm77kvY3nva7vvIzngrnlh7votLTkuIpcIixcblx0ICAgICAgICAgICAgLy8gICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIuWlveeahFwiXG5cdCAgICAgICAgICAgIC8vIH0pXG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHRpbWVzdGFtcCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgZGVsdGEgPSBNYXRoLm1pbih0aW1lc3RhbXAgLSB0aGlzLmxhc3RSZW5kZXIsIDUwMClcblx0ICAgICAgICAgICAgdGhpcy5sYXN0UmVuZGVyID0gdGltZXN0YW1wO1xuXHQgICAgICAgICAgICAvL+WkhOeQhum8oOagh+eCueWHu1xuXHQgICAgICAgICAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMubW91c2UsIHRoaXMuY2FtZXJhKTtcblx0ICAgICAgICAgICAgdmFyIGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMuc2NlbmUuY2hpbGRyZW4pO1xuXHQgICAgICAgICAgICB0aGlzLm1vdXNlLnggPSB0aGlzLm1vdXNlLnkgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGludGVyc2VjdHMpXG5cdCAgICAgICAgICAgICAgICB2YXIgY2xpY2tGbGFnID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMubWVzaExpc3RbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNoID0gX3N0ZXAudmFsdWU7XG5cdFxuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKG1lc2guaWQpID4gLTEgJiYgbWVzaC5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVzaC5tYXRlcmlhbC5jb2xvci5zZXQoMHhmZjAwMDApXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygxKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTWVzaCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC52aXNpYmxlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbWVzaDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi6LS05LiKXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja0ZsYWcgPSB0cnVlO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gudmlzaWJsZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaW5cIikuYXBwZW5kQ2hpbGQodGhpcy5tZXNoQ2FudmFzTWFwW21lc2guaWRdKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lc2ggJiYgdGhpcy5ob2xkTWFwW3RoaXMuc2VsZWN0ZWRNZXNoLmlkXS5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gaW50ZXJzZWN0c1swXS5vYmplY3QucG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gucG9zaXRpb24uc2V0KHQueCwgdC55LCB0LnopO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRNYXBbdGhpcy5zZWxlY3RlZE1lc2guaWRdLnBvc2l0aW9uLnogLT0gMTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC52aXNpYmxlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlLnBpY2tCdG4uaW5uZXJIVE1MID0gXCLmjaHotbdcIjtcblx0ICAgICAgICAgICAgICAgICAgICAvL+WcqOacquaLvOaIkOWbvueJh+WIl+ihqOS4reWPluWHuuW9k+WJjemhuVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZnJlZVBpZWNlTGlzdC5zcGxpY2UodGhpcy5mcmVlUGllY2VMaXN0LmluZGV4T2YodGhpcy5zZWxlY3RlZE1lc2guaWQpLCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICAvL+a4healmuW9k+WJjemAieWPlueahOWbvuWDj1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5sZW5ndGggPT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3N3ZWV0YWxlcnQyLmRlZmF1bHQpKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIuaBreWWnO+8gVwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLmiJDlip/mi7zlrozkuobkuIDlvKDlm77vvIzlj6/mmK/miJHkuZ/kuI3kvJrnu5nkvaDmtYHph49cIixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIuWlveeahFwiXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTWVzaCAmJiAhY2xpY2tGbGFnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi5o2h6LW3XCI7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNhbnZhcygpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgdGhpcy5jb250cm9scy51cGRhdGUoKTtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuXHRcblx0ICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIm9uUmVzaXplXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzaXplKGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cdCAgICAgICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiY2xlYXJDYW52YXNcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJDYW52YXMoKSB7XG5cdCAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpbiBjYW52YXNcIik7XG5cdCAgICAgICAgICAgIHZhciBwaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKTtcblx0ICAgICAgICAgICAgd2hpbGUgKGNhbnZhcyAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBwaW4ucmVtb3ZlQ2hpbGQoY2FudmFzKTtcblx0ICAgICAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gR2FtZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gR2FtZTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBNb3VzZSA9IGZ1bmN0aW9uIChfVEhSRUUkVmVjdG9yKSB7XG5cdCAgICBfaW5oZXJpdHMoTW91c2UsIF9USFJFRSRWZWN0b3IpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE1vdXNlKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vdXNlKTtcblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1vdXNlKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdFxuXHQgICAgICAgIF90aGlzLnggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgX3RoaXMueSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCB0aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpLCBmYWxzZSApXG5cdCAgICAgICAgX3RoaXMucGlja0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGljay1idG5cIik7XG5cdCAgICAgICAgX3RoaXMucGlja0hhbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpY2staGFuZFwiKTtcblx0ICAgICAgICBfdGhpcy5waWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdGhpcy5idG5PbkNsaWNrLmJpbmQoX3RoaXMpLCBmYWxzZSk7XG5cdCAgICAgICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25Nb3VzZUNsaWNrLmJpbmQodGhpcyksZmFsc2UpXG5cdCAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhNb3VzZSwgW3tcblx0ICAgICAgICBrZXk6IFwib25Nb3VzZUNsaWNrXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uTW91c2VDbGljayhldmVudCkge1xuXHQgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbW91c2UgcG9zaXRpb24gaW4gbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZXNcblx0ICAgICAgICAgICAgLy8gKC0xIHRvICsxKSBmb3IgYm90aCBjb21wb25lbnRzXG5cdCAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LmNsaWVudFgsZXZlbnQuY2xpZW50WSlcblx0ICAgICAgICAgICAgdGhpcy54ID0gZXZlbnQuY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoICogMiAtIDE7XG5cdCAgICAgICAgICAgIHRoaXMueSA9IC0oZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiAyICsgMTtcblx0ICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy54LHRoaXMueSlcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImJ0bk9uQ2xpY2tcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuT25DbGljayhldmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLnggPSAwLjQ2ICogMiAtIDE7XG5cdCAgICAgICAgICAgIHRoaXMueSA9IC0wLjM5NSAqIDIgKyAxO1xuXHQgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLngsdGhpcy55KVxuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gTW91c2U7XG5cdH0oVEhSRUUuVmVjdG9yMik7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBNb3VzZTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJpbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGdcIjtcblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gc3dhbDtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogVlJQdXp6bGUuYnVuZGxlLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1ZSUHV6emxlL3B1YmxpYy9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIGI3NDg0NjNjZDkxOWRlOWUwNzIxXG4gKiovIiwiaW1wb3J0IEdhbWUgZnJvbSBcIi4vZ2FtZS5qc1wiXHJcbmxldCBnYW1lID0gbmV3IEdhbWUoKVxyXG5cclxuY29uc3QgbG9vcCA9ICgpPT57XHJcbiAgICBnYW1lLnJlbmRlcigpXHJcbiAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcclxufVxyXG5sb29wKClcclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvamF2YXNjcmlwdHMvaW5kZXguanNcbiAqKi8iLCJcclxuaW1wb3J0IE1vdXNlIGZyb20gXCIuL21vdXNlLmpzXCJcclxuaW1wb3J0IHN3YWwgZnJvbSBcInN3ZWV0YWxlcnRcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBDcmVhdGUgYSB0aHJlZS5qcyBzY2VuZS5cclxuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKClcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgdGhyZWUuanMgY2FtZXJhLlxyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwMClcclxuXHJcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDAsMTAsMClcclxuICAgICAgICB0aGlzLmNvbnRyb2xzID0gbmV3IFRIUkVFLkRldmljZU9yaWVudGF0aW9uQ29udHJvbHMoIHRoaXMuY2FtZXJhICk7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7XHJcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cdFx0dGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyApO1xyXG5cdFx0dGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cdFx0dGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHRcdHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAwO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAvLyByYXljYXN0ZXJcclxuICAgICAgICB0aGlzLnJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKVxyXG4gICAgICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2UoKVxyXG4gICAgICAgICAgICAvL2JpbmQgdGhpc1xyXG4gICAgICAgIHRoaXMub25UZXh0dXJlTG9hZGVkID0gdGhpcy5vblRleHR1cmVMb2FkZWQuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMub25SZXNpemUgPSB0aGlzLm9uUmVzaXplLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnBsYWNlUGllY2VzID0gdGhpcy5wbGFjZVBpZWNlcy5iaW5kKHRoaXMpXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5tZXNoTGlzdCA9IFtdXHJcbiAgICAgICAgdGhpcy5sb2dGbGFnID0gdHJ1ZVxyXG4gICAgICAgICAgICAvLyBBZGQgYSByZXBlYXRpbmcgZ3JpZCBhcyBhIHNreWJveC5cclxuICAgICAgICB0aGlzLmJveFNpemUgPSAzMFxyXG4gICAgICAgIC8vIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxyXG4gICAgICAgIC8vIHRoaXMubG9hZGVyLmxvYWQoXCJwdWJsaWMvaW1hZ2VzL2JveC5wbmdcIiwgdGhpcy5vblRleHR1cmVMb2FkZWQpXHJcbiAgICAgICAgLy8gbGV0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpXHJcbiAgICAgICAgdGhpcy5vblRleHR1cmVMb2FkZWQoKVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUsIHRydWUpXHJcbiAgICAgICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2cmRpc3BsYXlwcmVzZW50Y2hhbmdlXCIsIHRoaXMub25SZXNpemUsIHRydWUpXHJcbiAgICAgICAgdGhpcy5sYXN0UmVuZGVyID0gMFxyXG4gICAgICAgIHRoaXMuZGlzcGxheSA9IG51bGxcclxuICAgIH1cclxuICAgIG9uVGV4dHVyZUxvYWRlZCgpIHtcclxuICAgICAgICAvLyB0ZXh0dXJlLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcclxuICAgICAgICAvLyB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcclxuICAgICAgICAvLyB0ZXh0dXJlLnJlcGVhdC5zZXQodGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUpXHJcblxyXG4gICAgICAgIGxldCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSh0aGlzLmJveFNpemUsIHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplKVxyXG4gICAgICAgIGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweGZmMDBmZiwgc2lkZTogVEhSRUUuQmFja1NpZGUsIHdpcmVmcmFtZTogdHJ1ZSB9IClcclxuXHJcbiAgICAgICAgLy8gQWxpZ24gdGhlIHNreWJveCB0byB0aGUgZmxvb3IgKHdoaWNoIGlzIGF0IHk9MCkuXHJcbiAgICAgICAgdGhpcy5za3lib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXHJcbiAgICAgICAgdGhpcy5za3lib3gucG9zaXRpb24ueSA9IHRoaXMuYm94U2l6ZSAvIDJcclxuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLnNreWJveClcclxuICAgICAgICB0aGlzLnBsYWNlUGllY2VzKClcclxuICAgICAgICB0aGlzLnBsYWNlU3BoZXJlKClcclxuICAgIH1cclxuICAgIHBsYWNlU3BoZXJlKCl7XHJcbiAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KCA1MCwgMTYsIDggKTtcclxuICAgICAgICBnZW9tZXRyeS5zY2FsZSgtMSwxLDEpXHJcblx0XHQvLyBnZW9tZXRyeS5zY2FsZSggLSAxLCAxLCAxICk7XHJcbiAgICAgICAgLy8gdmFyIHNwaGVyZSA9IHJlcXVpcmUoXCIuLi8uLi9wdWJsaWMvaW1hZ2VzL3NwaGVyZSAoMikuanBnXCIpXHJcbiAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKClcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICAgICBsb2FkZXIubG9hZChcInB1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIixmdW5jdGlvbih0ZXh0dXJlKXtcclxuICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7XHJcbiAgICBcdFx0XHRtYXA6IHRleHR1cmVcclxuICAgIFx0XHR9ICk7XHJcblxyXG4gICAgXHRcdHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtZXNoKVxyXG4gICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldCgwLDAsMTApXHJcbiAgICBcdFx0c2VsZi5zY2VuZS5hZGQoIG1lc2ggKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgcGxhY2VQaWVjZXMoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuY29sdW1uTnVtYmVyID0gNFxyXG4gICAgICAgIHRoaXMucGllY2VOdW1iZXIgPSB0aGlzLmNvbHVtbk51bWJlciAqIHRoaXMuY29sdW1uTnVtYmVyXHJcbiAgICAgICAgdGhpcy5zY2FsZWRXaWR0aCA9IDE2XHJcbiAgICAgICAgdGhpcy5zY2FsZWRIZWlnaHQgPSA5XHJcbiAgICAgICAgdGhpcy5mcmVlUGllY2VOdW1iZXIgPSB0aGlzLnBpZWNlTnVtYmVyICogMSAvIDJcclxuICAgICAgICB0aGlzLmZyZWVQaWVjZUxpc3QgPSBbXVxyXG4gICAgICAgIHRoaXMucGxhbmVXaWR0aCA9IHRoaXMuc2NhbGVkV2lkdGggLyB0aGlzLmNvbHVtbk51bWJlclxyXG4gICAgICAgIHRoaXMucGxhbmVIZWlnaHQgPSB0aGlzLnNjYWxlZEhlaWdodCAvIHRoaXMuY29sdW1uTnVtYmVyXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBudWxsIC8vdGhlIGxhc3QgY2xpY2tlZCBtZXNoSWRcclxuICAgICAgICB0aGlzLmhvbGRNYXAgPSB7fVxyXG4gICAgICAgIHRoaXMubWVzaENhbnZhc01hcCA9IHt9XHJcbiAgICAgICAgLy8gdGhpcy5cclxuICAgICAgICAgICAgLy8gbG9hZCBhbiBpbWFnZVxyXG4gICAgICAgIGxldCBpbWFnZU9iaiA9IG5ldyBJbWFnZSgpXHJcbiAgICAgICAgaW1hZ2VPYmouc3JjID0gcmVxdWlyZShcIi4uLy4uL3B1YmxpYy9pbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGdcIilcclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKVxyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxyXG5cclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5waWVjZVdpZHRoLHRoaXMucGllY2VIZWlnaHQpXHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzXHJcbiAgICAgICAgaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCB3cyA9IChjYW52YXMud2lkdGggLyAxLjUpIC8gaW1hZ2VPYmoud2lkdGhcclxuICAgICAgICAgICAgbGV0IGhzID0gKGNhbnZhcy5oZWlnaHQgLyAxLjUpIC8gaW1hZ2VPYmouaGVpZ2h0XHJcbiAgICAgICAgICAgIHNlbGYuc2NhbGUgPSBNYXRoLm1pbih3cywgaHMpXHJcbiAgICAgICAgICAgIHNlbGYucGllY2VXaWR0aCA9IGltYWdlT2JqLndpZHRoIC8gc2VsZi5jb2x1bW5OdW1iZXJcclxuICAgICAgICAgICAgc2VsZi5waWVjZUhlaWdodCA9IGltYWdlT2JqLmhlaWdodCAvIHNlbGYuY29sdW1uTnVtYmVyXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpbmRleCA9IDAsIHRleHR1cmUsIG1hdGVyaWFsLCBtZXNoOyBpIDwgc2VsZi5jb2x1bW5OdW1iZXI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzZWxmLmNvbHVtbk51bWJlcjsgaisrLCBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKGNhbnZhcylcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZU9iaiwgaSAqIHNlbGYucGllY2VXaWR0aCwgaiAqIHNlbGYucGllY2VIZWlnaHQsIHNlbGYucGllY2VXaWR0aCwgc2VsZi5waWVjZUhlaWdodCwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlKSAvLyBjaGVja3MgaWYgdGV4dHVyZSBleGlzdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXA6IHRleHR1cmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gZmFsc2VcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzZWxmLnBsYW5lV2lkdGgsIHNlbGYucGxhbmVIZWlnaHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmRvbSA9IE1hdGgucmFuZG9tKClcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tIDwgc2VsZi5mcmVlUGllY2VOdW1iZXIgLyAoc2VsZi5jb2x1bW5OdW1iZXIgKiBzZWxmLmNvbHVtbk51bWJlciAtIGluZGV4KSAmJiBzZWxmLmZyZWVQaWVjZU51bWJlciA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKHNlbGYuYm94U2l6ZSAtIHNlbGYucGxhbmVXaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHogPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVIZWlnaHQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChzZWxmLmJveFNpemUgLSBzZWxmLnBsYW5lSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChNYXRoLnJvdW5kKHgpLCAwLjUsIE1hdGgucm91bmQoeikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibGFua01lc2ggPSBtZXNoLmNsb25lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob2xkTWFwW21lc2guaWRdID0gYmxhbmtNZXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5yb3RhdGlvbi54ID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IDB4ODA4MDgwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gucG9zaXRpb24uc2V0KGkqc2VsZi5wbGFuZVdpZHRoIC0gc2VsZi5zY2FsZWRXaWR0aCAvIDIgKyBzZWxmLnBsYW5lV2lkdGggLyAyLCA1ICsgc2VsZi5zY2FsZWRIZWlnaHQgLSBzZWxmLnBsYW5lSGVpZ2h0IC8gMiAtIGogKiBzZWxmLnBsYW5lSGVpZ2h0LCAtOS45OSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQoYmxhbmtNZXNoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZyZWVQaWVjZU51bWJlci0tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnJlZVBpZWNlTGlzdC5wdXNoKG1lc2guaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaENhbnZhc01hcFttZXNoLmlkXSA9IGNhbnZhc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KGkgKiBzZWxmLnBsYW5lV2lkdGggLSBzZWxmLnNjYWxlZFdpZHRoIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIsIDUgKyBzZWxmLnNjYWxlZEhlaWdodCAtIHNlbGYucGxhbmVIZWlnaHQgLyAyIC0gaiAqIHNlbGYucGxhbmVIZWlnaHQsIC05Ljk5KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBtZXNoLnBvc2l0aW9uLnNldCgwLCAyLC05KVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaExpc3QucHVzaChtZXNoKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2NlbmUuYWRkKG1lc2gpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHR5cGVvZiB0aGlzLnNjZW5lKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN3YWwoe1xyXG4gICAgICAgIC8vICAgICB0aXRsZTogXCLmj5DnpLpcIixcclxuICAgICAgICAvLyAgICAgdGV4dDogXCLmiorlsY/luZXkuK3lpK7nmoTlsI/miYvlr7nlh4blnLDkuIrnmoTlm77niYfvvIzngrnlh7vmjInpkq7mjaHotbfvvIzlho3miorlm77niYflr7nlh4bljp/lm77kvY3nva7vvIzngrnlh7votLTkuIpcIixcclxuICAgICAgICAvLyAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi5aW955qEXCJcclxuICAgICAgICAvLyB9KVxyXG4gICAgfVxyXG4gICAgcmVuZGVyKHRpbWVzdGFtcCkge1xyXG4gICAgICAgIC8vIHZhciBkZWx0YSA9IE1hdGgubWluKHRpbWVzdGFtcCAtIHRoaXMubGFzdFJlbmRlciwgNTAwKVxyXG4gICAgICAgIHRoaXMubGFzdFJlbmRlciA9IHRpbWVzdGFtcFxyXG4gICAgICAgICAgICAvL+WkhOeQhum8oOagh+eCueWHu1xyXG4gICAgICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5tb3VzZSwgdGhpcy5jYW1lcmEpXHJcbiAgICAgICAgbGV0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMuc2NlbmUuY2hpbGRyZW4pXHJcbiAgICAgICAgdGhpcy5tb3VzZS54ID0gdGhpcy5tb3VzZS55ID0gdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbnRlcnNlY3RzKVxyXG4gICAgICAgICAgICBsZXQgY2xpY2tGbGFnID0gZmFsc2VcclxuICAgICAgICAgICAgZm9yIChsZXQgbWVzaCBvZiB0aGlzLm1lc2hMaXN0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKG1lc2guaWQpID4gLTEgJiYgbWVzaC5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lc2gubWF0ZXJpYWwuY29sb3Iuc2V0KDB4ZmYwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZE1lc2ghPT1udWxsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNhbnZhcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbWVzaFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDIpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi6LS05LiKXCJcclxuICAgICAgICAgICAgICAgICAgICBjbGlja0ZsYWcgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1lc2gudmlzaWJsZSA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaW5cIikuYXBwZW5kQ2hpbGQodGhpcy5tZXNoQ2FudmFzTWFwW21lc2guaWRdKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZE1lc2ggJiYgdGhpcy5ob2xkTWFwW3RoaXMuc2VsZWN0ZWRNZXNoLmlkXS5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGludGVyc2VjdHNbMF0ub2JqZWN0LnBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC5wb3NpdGlvbi5zZXQodC54LHQueSx0LnopXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC5yb3RhdGlvbi5zZXQoMCwwLDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvbGRNYXBbdGhpcy5zZWxlY3RlZE1lc2guaWRdLnBvc2l0aW9uLnogLT0gMVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWVcclxuICAgICAgICAgICAgICAgIHRoaXMubW91c2UucGlja0J0bi5pbm5lckhUTUwgPSBcIuaNoei1t1wiXHJcbiAgICAgICAgICAgICAgICAvL+WcqOacquaLvOaIkOWbvueJh+WIl+ihqOS4reWPluWHuuW9k+WJjemhuVxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmVlUGllY2VMaXN0LnNwbGljZSh0aGlzLmZyZWVQaWVjZUxpc3QuaW5kZXhPZih0aGlzLnNlbGVjdGVkTWVzaC5pZCksMSlcclxuICAgICAgICAgICAgICAgIC8v5riF5qWa5b2T5YmN6YCJ5Y+W55qE5Zu+5YOPXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5mcmVlUGllY2VMaXN0Lmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBzd2FsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6XCLmga3llpzvvIFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLmiJDlip/mi7zlrozkuobkuIDlvKDlm77vvIzlj6/mmK/miJHkuZ/kuI3kvJrnu5nkvaDmtYHph49cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi5aW955qEXCJcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRNZXNoICYmICFjbGlja0ZsYWcpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi5o2h6LW3XCJcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZSgpXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSx0aGlzLmNhbWVyYSlcclxuXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyKVxyXG4gICAgfVxyXG4gICAgb25SZXNpemUoZSkge1xyXG4gICAgICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cdFx0dGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cdFx0dGhpcy5yZW5kZXJlci5zZXRTaXplKCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0ICk7XHJcbiAgICB9XHJcbiAgICBjbGVhckNhbnZhcygpe1xyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpbiBjYW52YXNcIilcclxuICAgICAgICBsZXQgcGluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaW5cIilcclxuICAgICAgICB3aGlsZShjYW52YXMhPW51bGwpe1xyXG4gICAgICAgICAgICBwaW4ucmVtb3ZlQ2hpbGQoY2FudmFzKVxyXG4gICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpbiBjYW52YXNcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvamF2YXNjcmlwdHMvZ2FtZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlIGV4dGVuZHMgVEhSRUUuVmVjdG9yMntcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKXtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuICAgICAgICB0aGlzLnggPSB1bmRlZmluZWRcclxuICAgICAgICB0aGlzLnkgPSB1bmRlZmluZWRcclxuICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCB0aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpLCBmYWxzZSApXHJcbiAgICAgICAgdGhpcy5waWNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaWNrLWJ0blwiKVxyXG4gICAgICAgIHRoaXMucGlja0hhbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpY2staGFuZFwiKVxyXG4gICAgICAgIHRoaXMucGlja0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmJ0bk9uQ2xpY2suYmluZCh0aGlzKSxmYWxzZSlcclxuICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5vbk1vdXNlQ2xpY2suYmluZCh0aGlzKSxmYWxzZSlcclxuICAgIH1cclxuICAgIG9uTW91c2VDbGljayggZXZlbnQgKSB7XHJcbiAgICBcdC8vIGNhbGN1bGF0ZSBtb3VzZSBwb3NpdGlvbiBpbiBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlc1xyXG4gICAgXHQvLyAoLTEgdG8gKzEpIGZvciBib3RoIGNvbXBvbmVudHNcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC5jbGllbnRYLGV2ZW50LmNsaWVudFkpXHJcbiAgICAgICAgdGhpcy54ID0gKCBldmVudC5jbGllbnRYIC8gd2luZG93LmlubmVyV2lkdGggKSAqIDIgLSAxXHJcbiAgICAgICAgdGhpcy55ID0gLSAoIGV2ZW50LmNsaWVudFkgLyB3aW5kb3cuaW5uZXJIZWlnaHQgKSAqIDIgKyAxXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy54LHRoaXMueSlcclxuICAgIH1cclxuICAgIGJ0bk9uQ2xpY2soIGV2ZW50ICkge1xyXG4gICAgICAgIHRoaXMueCA9ICggMC40NiApICogMiAtIDFcclxuICAgICAgICB0aGlzLnkgPSAtICggMC4zOTUgKSAqIDIgKyAxXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy54LHRoaXMueSlcclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qYXZhc2NyaXB0cy9tb3VzZS5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy9wdXp6bGVzL2NhcnRvb24gKDMpLmpwZ1wiO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9wdWJsaWMvaW1hZ2VzL3B1enpsZXMvY2FydG9vbiAoMykuanBnXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBzd2FsO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJzd2FsXCJcbiAqKiBtb2R1bGUgaWQgPSA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9