!function(e){function t(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var i={};return t.m=e,t.c=i,t.p="/VRPuzzle/public/",t(0)}([function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}i(5);var s=i(1),r=n(s),o=new r["default"],a=function(){o.render()};a()},function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=i(2),a=n(o),h=i(4),c=n(h),l=function(){function e(){s(this,e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.set(0,10,0),this.controls=new THREE.DeviceOrientationControls(this.camera),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top=0,document.body.appendChild(this.renderer.domElement),this.raycaster=new THREE.Raycaster,this.mouse=new a["default"],this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.placePieces=this.placePieces.bind(this),this.meshList=[],this.logFlag=!0,this.boxSize=30,this.onTextureLoaded(),window.addEventListener("resize",this.onResize,!0),this.lastRender=0,this.display=null}return r(e,[{key:"onTextureLoaded",value:function(){var e=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),t=new THREE.MeshBasicMaterial({color:16711935,side:THREE.BackSide,wireframe:!0});this.skybox=new THREE.Mesh(e,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox),this.placePieces(),this.placeSphere()}},{key:"placeSphere",value:function(){var e=new THREE.SphereGeometry(50,16,8);e.scale(-1,1,1);var t=new THREE.TextureLoader,i=this;t.load("public/images/sphere (2).jpg",function(t){var n=new THREE.MeshBasicMaterial({map:t}),s=new THREE.Mesh(e,n);s.position.set(0,0,10),i.scene.add(s)})}},{key:"placePieces",value:function(){this.columnNumber=4,this.pieceNumber=this.columnNumber*this.columnNumber,this.scaledWidth=16,this.scaledHeight=9,this.freePieceNumber=1*this.pieceNumber/2,this.freePieceList=[],this.planeWidth=this.scaledWidth/this.columnNumber,this.planeHeight=this.scaledHeight/this.columnNumber,this.selectedMesh=null,this.holdMap={},this.meshCanvasMap={};var e=new Image;e.src=i(3);var t=document.createElement("canvas"),n=t.getContext("2d"),s=this;e.onload=function(){var i=t.width/1.5/e.width,r=t.height/1.5/e.height;s.scale=Math.min(i,r),s.pieceWidth=e.width/s.columnNumber,s.pieceHeight=e.height/s.columnNumber;for(var o,a,h,c=0,l=0;c<s.columnNumber;c++)for(var d=0;d<s.columnNumber;d++,l++){t=document.createElement("canvas"),n=t.getContext("2d"),o=new THREE.Texture(t),n.drawImage(e,c*s.pieceWidth,d*s.pieceHeight,s.pieceWidth,s.pieceHeight,0,0,t.width,t.height),o&&(o.needsUpdate=!0),a=new THREE.MeshBasicMaterial({map:o,side:THREE.DoubleSide}),a.transparent=!1,h=new THREE.Mesh(new THREE.PlaneGeometry(s.planeWidth,s.planeHeight),a);var u=Math.random();if(u<s.freePieceNumber/(s.columnNumber*s.columnNumber-l)&&s.freePieceNumber>0){var p=-s.boxSize/2+s.planeWidth/2+Math.random()*(s.boxSize-s.planeWidth),m=-s.boxSize/2+s.planeHeight/2+Math.random()*(s.boxSize-s.planeHeight);h.rotation.x=Math.PI/2,h.position.set(Math.round(p),.5,Math.round(m));var f=h.clone();s.holdMap[h.id]=f,f.rotation.x=0,f.material=new THREE.MeshBasicMaterial({color:8421504,side:THREE.DoubleSide}),f.position.set(c*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-d*s.planeHeight,-9.99),s.scene.add(f),s.freePieceNumber--,s.freePieceList.push(h.id),s.meshCanvasMap[h.id]=t}else h.position.set(c*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-d*s.planeHeight,-9.99);s.meshList.push(h),s.scene.add(h)}}}},{key:"render",value:function(e){this.lastRender=e,this.raycaster.setFromCamera(this.mouse,this.camera);var t=this.raycaster.intersectObjects(this.scene.children);if(this.mouse.x=this.mouse.y=void 0,t.length>0){var i=!1,n=!0,s=!1,r=void 0;try{for(var o,a=this.meshList[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){var h=o.value;this.freePieceList.indexOf(h.id)>-1&&h.id==t[0].object.id&&(console.log(1),null!==this.selectedMesh&&(this.clearCanvas(),this.selectedMesh.visible=!0),this.selectedMesh=h,console.log(2),this.mouse.pickBtn.innerHTML="贴上",i=!0,h.visible=!1,document.getElementById("pin").appendChild(this.meshCanvasMap[h.id]),console.log(3))}}catch(l){s=!0,r=l}finally{try{!n&&a["return"]&&a["return"]()}finally{if(s)throw r}}if(this.selectedMesh&&this.holdMap[this.selectedMesh.id].id==t[0].object.id){var d=t[0].object.position;this.selectedMesh.position.set(d.x,d.y,d.z),this.selectedMesh.rotation.set(0,0,0),this.holdMap[this.selectedMesh.id].position.z-=1,this.selectedMesh.visible=!0,this.mouse.pickBtn.innerHTML="捡起",this.freePieceList.splice(this.freePieceList.indexOf(this.selectedMesh.id),1),this.clearCanvas(),this.selectedMesh=null,0==this.freePieceList.length&&(0,c["default"])({title:"恭喜！",text:"成功拼完了一张图，可是我也不会给你流量",confirmButtonText:"好的"})}this.selectedMesh&&!i&&(this.mouse.pickBtn.innerHTML="捡起",this.selectedMesh.visible=!0,this.clearCanvas(),this.selectedMesh=null)}this.controls.update(),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}},{key:"clearCanvas",value:function(){for(var e=document.querySelector("#pin canvas"),t=document.getElementById("pin");null!=e;)t.removeChild(e),e=document.querySelector("#pin canvas")}}]),e}();t["default"]=l},function(e,t){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=function(e){function t(e){i(this,t);var s=n(this,Object.getPrototypeOf(t).call(this,e));return s.x=void 0,s.y=void 0,s.pickBtn=document.getElementById("pick-btn"),s.pickHand=document.getElementById("pick-hand"),s.pickBtn.addEventListener("click",s.btnOnClick.bind(s),!1),s}return s(t,e),r(t,[{key:"onMouseClick",value:function(e){this.x=e.clientX/window.innerWidth*2-1,this.y=2*-(e.clientY/window.innerHeight)+1}},{key:"btnOnClick",value:function(e){this.x=.92-1,this.y=-.79+1}}]),t}(THREE.Vector2);t["default"]=o},function(e,t,i){e.exports=i.p+"images/puzzles/cartoon (3).jpg"},function(e,t){e.exports=swal},function(e,t){e.exports=!0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,