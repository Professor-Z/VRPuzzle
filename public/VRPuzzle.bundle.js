!function(e){function t(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=u.p+""+e+"."+g+".hot-update.js",t.appendChild(n)}function n(e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var t=new XMLHttpRequest,n=u.p+""+g+".hot-update.json";t.open("GET",n,!0),t.timeout=1e4,t.send(null)}catch(i){return e(i)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)e(new Error("Manifest request to "+n+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)e(new Error("Manifest request to "+n+" failed."));else{try{var i=JSON.parse(t.responseText)}catch(r){return void e(r)}e(null,i)}}}function i(e){function t(e,t){"ready"===M&&s("prepare"),P++,u.e(e,function(){function n(){P--,"prepare"===M&&(T[e]||l(e),0===P&&0===O&&d())}try{t.call(null,i)}finally{n()}})}var n=j[e];if(!n)return u;var i=function(t){return n.hot.active?j[t]?(j[t].parents.indexOf(e)<0&&j[t].parents.push(e),n.children.indexOf(t)<0&&n.children.push(t)):H=[e]:(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),H=[]),u(t)};for(var r in u)Object.prototype.hasOwnProperty.call(u,r)&&(f?Object.defineProperty(i,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return u[e]},set:function(t){u[e]=t}}}(r)):i[r]=u[r]);return f?Object.defineProperty(i,"e",{enumerable:!0,value:t}):i.e=t,i}function r(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(e,n){if("undefined"==typeof e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n;else t._acceptedDependencies[e]=n},decline:function(e){if("undefined"==typeof e)t._selfDeclined=!0;else if("number"==typeof e)t._declinedDependencies[e]=!0;else for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:a,apply:h,status:function(e){return e?void x.push(e):M},addStatusHandler:function(e){x.push(e)},removeStatusHandler:function(e){var t=x.indexOf(e);t>=0&&x.splice(t,1)},data:E[e]};return t}function s(e){M=e;for(var t=0;t<x.length;t++)x[t].call(null,e)}function o(e){var t=+e+""===e;return t?+e:e}function a(e,t){if("idle"!==M)throw new Error("check() is only allowed in idle status");"function"==typeof e?(w=!1,t=e):(w=e,t=t||function(e){if(e)throw e}),s("check"),n(function(e,n){if(e)return t(e);if(!n)return s("idle"),void t(null,null);R={},_={},T={};for(var i=0;i<n.c.length;i++)_[n.c[i]]=!0;b=n.h,s("prepare"),m=t,y={};var r=0;l(r),"prepare"===M&&0===P&&0===O&&d()})}function c(e,t){if(_[e]&&R[e]){R[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0===--O&&0===P&&d()}}function l(e){_[e]?(R[e]=!0,O++,t(e)):T[e]=!0}function d(){s("ready");var e=m;if(m=null,e)if(w)h(w,e);else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(o(n));e(null,t)}}function h(t,n){function i(e){for(var t=[e],n={},i=t.slice();i.length>0;){var s=i.pop(),e=j[s];if(e&&!e.hot._selfAccepted){if(e.hot._selfDeclined)return new Error("Aborted because of self decline: "+s);if(0===s)return;for(var o=0;o<e.parents.length;o++){var a=e.parents[o],c=j[a];if(c.hot._declinedDependencies[s])return new Error("Aborted because of declined dependency: "+s+" in "+a);t.indexOf(a)>=0||(c.hot._acceptedDependencies[s]?(n[a]||(n[a]=[]),r(n[a],[s])):(delete n[a],t.push(a),i.push(a)))}}}return[t,n]}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];e.indexOf(i)<0&&e.push(i)}}if("ready"!==M)throw new Error("apply() is only allowed in ready status");"function"==typeof t?(n=t,t={}):t&&"object"==typeof t?n=n||function(e){if(e)throw e}:(t={},n=n||function(e){if(e)throw e});var a={},c=[],l={};for(var d in y)if(Object.prototype.hasOwnProperty.call(y,d)){var h=o(d),p=i(h);if(!p){if(t.ignoreUnaccepted)continue;return s("abort"),n(new Error("Aborted because "+h+" is not accepted"))}if(p instanceof Error)return s("abort"),n(p);l[h]=y[h],r(c,p[0]);for(var h in p[1])Object.prototype.hasOwnProperty.call(p[1],h)&&(a[h]||(a[h]=[]),r(a[h],p[1][h]))}for(var f=[],v=0;v<c.length;v++){var h=c[v];j[h]&&j[h].hot._selfAccepted&&f.push({module:h,errorHandler:j[h].hot._selfAccepted})}s("dispose");for(var m=c.slice();m.length>0;){var h=m.pop(),w=j[h];if(w){for(var x={},O=w.hot._disposeHandlers,P=0;P<O.length;P++){var T=O[P];T(x)}E[h]=x,w.hot.active=!1,delete j[h];for(var P=0;P<w.children.length;P++){var R=j[w.children[P]];if(R){var _=R.parents.indexOf(h);_>=0&&R.parents.splice(_,1)}}}}for(var h in a)if(Object.prototype.hasOwnProperty.call(a,h))for(var w=j[h],k=a[h],P=0;P<k.length;P++){var S=k[P],_=w.children.indexOf(S);_>=0&&w.children.splice(_,1)}s("apply"),g=b;for(var h in l)Object.prototype.hasOwnProperty.call(l,h)&&(e[h]=l[h]);var z=null;for(var h in a)if(Object.prototype.hasOwnProperty.call(a,h)){for(var w=j[h],k=a[h],C=[],v=0;v<k.length;v++){var S=k[v],T=w.hot._acceptedDependencies[S];C.indexOf(T)>=0||C.push(T)}for(var v=0;v<C.length;v++){var T=C[v];try{T(a)}catch(L){z||(z=L)}}}for(var v=0;v<f.length;v++){var W=f[v],h=W.module;H=[h];try{u(h)}catch(L){if("function"==typeof W.errorHandler)try{W.errorHandler(L)}catch(L){z||(z=L)}else z||(z=L)}}return z?(s("fail"),n(z)):(s("idle"),void n(null,c))}function u(t){if(j[t])return j[t].exports;var n=j[t]={exports:{},id:t,loaded:!1,hot:r(t),parents:H,children:[]};return e[t].call(n.exports,n,n.exports,i(t)),n.loaded=!0,n.exports}var p=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){c(e,t),p&&p(e,t)};var f=!1;try{Object.defineProperty({},"x",{get:function(){}}),f=!0}catch(v){}var m,y,b,w=!0,g="e2f82ff6a5b7a9627a34",E={},H=[],x=[],M="idle",O=0,P=0,T={},R={},_={},j={};return u.m=e,u.c=j,u.p="/VRPuzzle/public/",u.h=function(){return g},i(0)(0)}([function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=n(1),s=i(r),o=new s["default"],a=function(){o.render()};a()},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(2),a=i(o),c=n(4),l=i(c),d=function(){function e(){r(this,e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.set(0,10,0),this.controls=new THREE.DeviceOrientationControls(this.camera),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top=0,document.body.appendChild(this.renderer.domElement),this.raycaster=new THREE.Raycaster,this.mouse=new a["default"],this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.placePieces=this.placePieces.bind(this),this.meshList=[],this.logFlag=!0,this.boxSize=30,this.onTextureLoaded(),window.addEventListener("resize",this.onResize,!0),this.lastRender=0,this.display=null}return s(e,[{key:"onTextureLoaded",value:function(){var e=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),t=new THREE.MeshBasicMaterial({color:16711935,side:THREE.BackSide,wireframe:!0});this.skybox=new THREE.Mesh(e,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox),this.placePieces(),this.placeSphere()}},{key:"placeSphere",value:function(){var e=new THREE.SphereGeometry(50,16,8);e.scale(-1,1,1);var t=new THREE.TextureLoader,n=this;t.load("public/images/sphere (2).jpg",function(t){var i=new THREE.MeshBasicMaterial({map:t}),r=new THREE.Mesh(e,i);console.log(r),r.position.set(0,0,10),n.scene.add(r)})}},{key:"placePieces",value:function(){this.columnNumber=4,this.pieceNumber=this.columnNumber*this.columnNumber,this.scaledWidth=16,this.scaledHeight=9,this.freePieceNumber=1*this.pieceNumber/2,this.freePieceList=[],this.planeWidth=this.scaledWidth/this.columnNumber,this.planeHeight=this.scaledHeight/this.columnNumber,this.selectedMesh=null,this.holdMap={},this.meshCanvasMap={};var e=new Image;e.src=n(3);var t=document.createElement("canvas"),i=t.getContext("2d"),r=t.width/1.5/e.width,s=t.height/1.5/e.height;this.scale=Math.min(r,s),this.pieceWidth=e.width/this.columnNumber,this.pieceHeight=e.height/this.columnNumber;var o=this;e.onload=function(){for(var n,r,s,a=0,c=0;a<o.columnNumber;a++)for(var l=0;l<o.columnNumber;l++,c++){t=document.createElement("canvas"),i=t.getContext("2d"),n=new THREE.Texture(t),i.drawImage(e,a*o.pieceWidth,l*o.pieceHeight,o.pieceWidth,o.pieceHeight,0,0,t.width,t.height),n&&(n.needsUpdate=!0),r=new THREE.MeshBasicMaterial({map:n,side:THREE.DoubleSide}),r.transparent=!1,s=new THREE.Mesh(new THREE.PlaneGeometry(o.planeWidth,o.planeHeight),r);var d=Math.random();if(d<o.freePieceNumber/(o.columnNumber*o.columnNumber-c)&&o.freePieceNumber>0){var h=-o.boxSize/2+o.planeWidth/2+Math.random()*(o.boxSize-o.planeWidth),u=-o.boxSize/2+o.planeHeight/2+Math.random()*(o.boxSize-o.planeHeight);s.rotation.x=Math.PI/2,s.position.set(Math.round(h),.5,Math.round(u));var p=s.clone();o.holdMap[s.id]=p,p.rotation.x=0,p.material=new THREE.MeshBasicMaterial({color:8421504,side:THREE.DoubleSide}),p.position.set(a*o.planeWidth-o.scaledWidth/2+o.planeWidth/2,5+o.scaledHeight-o.planeHeight/2-l*o.planeHeight,-9.99),o.scene.add(p),o.freePieceNumber--,o.freePieceList.push(s.id),o.meshCanvasMap[s.id]=t}else s.position.set(a*o.planeWidth-o.scaledWidth/2+o.planeWidth/2,5+o.scaledHeight-o.planeHeight/2-l*o.planeHeight,-9.99);o.meshList.push(s),o.scene.add(s)}},(0,l["default"])({title:"提示",text:"把屏幕中央的小手对准地上的图片，点击按钮捡起，再把图片对准原图位置，点击贴上",confirmButtonText:"知道了"})}},{key:"render",value:function(e){this.lastRender=e,this.raycaster.setFromCamera(this.mouse,this.camera);var t=this.raycaster.intersectObjects(this.scene.children);if(this.mouse.x=this.mouse.y=void 0,t.length>0){console.log(t);var n=!1,i=!0,r=!1,s=void 0;try{for(var o,a=this.meshList[Symbol.iterator]();!(i=(o=a.next()).done);i=!0){var c=o.value;this.freePieceList.indexOf(c.id)>-1&&c.id==t[0].object.id&&(null!==this.selectedMesh&&(this.clearCanvas(),this.selectedMesh.visible=!0),this.selectedMesh=c,this.mouse.pickBtn.innerHTML="贴上",n=!0,c.visible=!1,document.getElementById("pin").appendChild(this.meshCanvasMap[c.id]))}}catch(l){r=!0,s=l}finally{try{!i&&a["return"]&&a["return"]()}finally{if(r)throw s}}if(this.selectedMesh&&this.holdMap[this.selectedMesh.id].id==t[0].object.id){var d=t[0].object.position;this.selectedMesh.position.set(d.x,d.y,d.z),this.selectedMesh.rotation.set(0,0,0),this.holdMap[this.selectedMesh.id].position.z-=1,this.selectedMesh.visible=!0,this.mouse.pickBtn.innerHTML="捡起",this.freePieceList.splice(this.freePieceList.indexOf(this.selectedMesh.id),1),this.clearCanvas(),this.selectedMesh=null}this.selectedMesh&&!n&&(this.mouse.pickBtn.innerHTML="捡起",this.selectedMesh.visible=!0,this.clearCanvas(),this.selectedMesh=null)}this.controls.update(),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}},{key:"clearCanvas",value:function(){for(var e=document.querySelector("#pin canvas"),t=document.getElementById("pin");e;)t.removeChild(e),e=document.querySelector("#pin canvas")}}]),e}();t["default"]=d},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(e){function t(e){n(this,t);var r=i(this,Object.getPrototypeOf(t).call(this,e));return r.x=void 0,r.y=void 0,r.pickBtn=document.getElementById("pick-btn"),r.pickHand=document.getElementById("pick-hand"),r.pickBtn.addEventListener("click",r.btnOnClick.bind(r),!1),r}return r(t,e),s(t,[{key:"onMouseClick",value:function(e){console.log(e.clientX,e.clientY),this.x=e.clientX/window.innerWidth*2-1,this.y=2*-(e.clientY/window.innerHeight)+1,console.log(this.x,this.y)}},{key:"btnOnClick",value:function(e){this.x=.92-1,this.y=.24,console.log(this.x,this.y)}}]),t}(THREE.Vector2);t["default"]=o},function(e,t,n){e.exports=n.p+"images/puzzles/cartoon (5).jpg"},function(e,t){e.exports=sweetalert}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVlJQdXp6bGUuYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBlMmY4MmZmNmE1YjdhOTYyN2EzNCIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL21vdXNlLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9pbWFnZXMvcHV6emxlcy9jYXJ0b29uICg1KS5qcGciLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3dlZXRhbGVydFwiIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJob3REb3dubG9hZFVwZGF0ZUNodW5rIiwiY2h1bmtJZCIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGFyc2V0Iiwic3JjIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInAiLCJob3RDdXJyZW50SGFzaCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImNhbGxiYWNrIiwiWE1MSHR0cFJlcXVlc3QiLCJFcnJvciIsInJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsImVyciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJlIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1vZHVsZUlkIiwiZW5zdXJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImZpbmlzaENodW5rTG9hZGluZyIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImNhbGwiLCJmbiIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiaG90Q3VycmVudFBhcmVudHMiLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbkRlZmluZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJhY2NlcHQiLCJkZXAiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiY2hlY2siLCJob3RDaGVjayIsImFwcGx5IiwiaG90QXBwbHkiLCJsIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsIm5ld1N0YXR1cyIsInRvTW9kdWxlSWQiLCJpZCIsImlzTnVtYmVyIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwiaG90QXZhaWxpYmxlRmlsZXNNYXAiLCJjIiwiaG90VXBkYXRlTmV3SGFzaCIsImgiLCJob3RDYWxsYmFjayIsImhvdFVwZGF0ZSIsImhvdEFkZFVwZGF0ZUNodW5rIiwibW9yZU1vZHVsZXMiLCJvdXRkYXRlZE1vZHVsZXMiLCJvcHRpb25zIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsIm1vZHVsZSIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsInBvcCIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwicmVzdWx0IiwiaWdub3JlVW5hY2NlcHRlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImRpc3Bvc2VIYW5kbGVycyIsImoiLCJjYiIsImNoaWxkIiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5IiwiZXJyb3IiLCJjYWxsYmFja3MiLCJleHBvcnRzIiwibG9hZGVkIiwicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ0aGlzIiwieCIsIm0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2FtZSIsIl9nYW1lMiIsImdhbWUiLCJsb29wIiwicmVuZGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9tb3VzZSIsIl9tb3VzZTIiLCJfc3dlZXRhbGVydCIsIl9zd2VldGFsZXJ0MiIsIkdhbWUiLCJzY2VuZSIsIlRIUkVFIiwiU2NlbmUiLCJjYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwiY29udHJvbHMiLCJEZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzIiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzZXRTaXplIiwiZG9tRWxlbWVudCIsInN0eWxlIiwidG9wIiwiYm9keSIsInJheWNhc3RlciIsIlJheWNhc3RlciIsIm1vdXNlIiwib25UZXh0dXJlTG9hZGVkIiwiYmluZCIsIm9uUmVzaXplIiwicGxhY2VQaWVjZXMiLCJtZXNoTGlzdCIsImxvZ0ZsYWciLCJib3hTaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxhc3RSZW5kZXIiLCJkaXNwbGF5IiwiZ2VvbWV0cnkiLCJCb3hHZW9tZXRyeSIsIm1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb2xvciIsInNpZGUiLCJCYWNrU2lkZSIsIndpcmVmcmFtZSIsInNreWJveCIsIk1lc2giLCJ5IiwiYWRkIiwicGxhY2VTcGhlcmUiLCJTcGhlcmVHZW9tZXRyeSIsInNjYWxlIiwibG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsInNlbGYiLCJsb2FkIiwidGV4dHVyZSIsIm1hcCIsIm1lc2giLCJsb2ciLCJjb2x1bW5OdW1iZXIiLCJwaWVjZU51bWJlciIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0IiwiZnJlZVBpZWNlTnVtYmVyIiwiZnJlZVBpZWNlTGlzdCIsInBsYW5lV2lkdGgiLCJwbGFuZUhlaWdodCIsInNlbGVjdGVkTWVzaCIsImhvbGRNYXAiLCJtZXNoQ2FudmFzTWFwIiwiaW1hZ2VPYmoiLCJJbWFnZSIsImNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwid3MiLCJ3aWR0aCIsImhzIiwiaGVpZ2h0IiwiTWF0aCIsIm1pbiIsInBpZWNlV2lkdGgiLCJwaWVjZUhlaWdodCIsIm9ubG9hZCIsImluZGV4IiwiVGV4dHVyZSIsImRyYXdJbWFnZSIsIm5lZWRzVXBkYXRlIiwiRG91YmxlU2lkZSIsInRyYW5zcGFyZW50IiwiUGxhbmVHZW9tZXRyeSIsInJhbmRvbSIsInoiLCJyb3RhdGlvbiIsIlBJIiwicm91bmQiLCJibGFua01lc2giLCJjbG9uZSIsInRpdGxlIiwidGV4dCIsImNvbmZpcm1CdXR0b25UZXh0IiwidGltZXN0YW1wIiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwidW5kZWZpbmVkIiwiY2xpY2tGbGFnIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJvYmplY3QiLCJjbGVhckNhbnZhcyIsInZpc2libGUiLCJwaWNrQnRuIiwiaW5uZXJIVE1MIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInF1ZXJ5U2VsZWN0b3IiLCJwaW4iLCJyZW1vdmVDaGlsZCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTW91c2UiLCJfVEhSRUUkVmVjdG9yIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInBpY2tIYW5kIiwiYnRuT25DbGljayIsImV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJWZWN0b3IyIiwic3dlZXRhbGVydCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NPbkIsUUFBQUMsR0FBQUMsR0FDQSxHQUFBQyxHQUFBQyxTQUFBQyxxQkFBQSxXQUNBQyxFQUFBRixTQUFBRyxjQUFBLFNBQ0FELEdBQUFFLEtBQUEsa0JBQ0FGLEVBQUFHLFFBQUEsUUFDQUgsRUFBQUksSUFBQUMsRUFBQUMsRUFBQSxHQUFBVixFQUFBLElBQUFXLEVBQUEsaUJBQ0FWLEVBQUFXLFlBQUFSLEdBR0EsUUFBQVMsR0FBQUMsR0FDQSxzQkFBQUMsZ0JBQ0EsTUFBQUQsR0FBQSxHQUFBRSxPQUFBLHNCQUNBLEtBQ0EsR0FBQUMsR0FBQSxHQUFBRixnQkFDQUcsRUFBQVQsRUFBQUMsRUFBQSxHQUFBQyxFQUFBLGtCQUNBTSxHQUFBRSxLQUFBLE1BQUFELEdB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LEdBQUt2SyxFQUFJb0ksT0FDVG1DLEVBQUs5RixFQUFJMkQsT0FFVG1DLEVBQUtyQixRQUFVelIsU0FBUzJSLGVBQWUsWUFDdkNtQixFQUFLRSxTQUFXaFQsU0FBUzJSLGVBQWUsYUFDeENtQixFQUFLckIsUUFBUXRGLGlCQUFpQixRQUFRMkcsRUFBS0csV0FBV3BILEtBQWhCaUgsSUFBMkIsR0FQbkRBLEVKNjZCakIsTUFwQ0FULEdBQVVPLEVBQU9DLEdBaUJqQnZKLEVBQWFzSixJQUNUaEosSUFBSyxlQUNMN0YsTUFBTyxTSWw1QkVtUCxHQUdWL1AsUUFBUXlLLElBQUlzRixFQUFNQyxRQUFRRCxFQUFNRSxTQUNoQzlLLEtBQUtDLEVBQU0ySyxFQUFNQyxRQUFVMUksT0FBT0MsV0FBZSxFQUFJLEVBQ3JEcEMsS0FBSzBFLEVBQStDLElBQXZDa0csRUFBTUUsUUFBVTNJLE9BQU9FLGFBQW9CLEVBQ3hEeEgsUUFBUXlLLElBQUl0RixLQUFLQyxFQUFFRCxLQUFLMEUsTUpxNUJ2QnBELElBQUssYUFDTDdGLE1BQU8sU0lwNUJBbVAsR0FDUjVLLEtBQUtDLEVBQU0sSUFBYSxFQUN4QkQsS0FBSzBFLEVBQUksSUFDVDdKLFFBQVF5SyxJQUFJdEYsS0FBS0MsRUFBRUQsS0FBSzBFLE9KdzVCcEI0RixHSTk2QnVCdkksTUFBTWdKLFFKaTdCeENsTCxjSWo3Qm9CeUssR0pxN0JmLFNBQVNqTSxFQUFRd0IsRUFBUzVILEdLcjdCaENvRyxFQUFBd0IsUUFBQTVILEVBQUFDLEVBQUEsa0NMMjdCTSxTQUFTbUcsRUFBUXdCLEdNMzdCdkJ4QixFQUFBd0IsUUFBQW1MIiwiZmlsZSI6IlZSUHV6emxlLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gdGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4vKioqKioqLyBcdHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gXHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuLyoqKioqKi8gXHRcdGlmKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuLyoqKioqKi8gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4vKioqKioqLyBcdFx0c2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xyXG4vKioqKioqLyBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbi8qKioqKiovIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xyXG4vKioqKioqLyBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KGNhbGxiYWNrKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIilcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XHJcbi8qKioqKiovIFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4vKioqKioqLyBcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcclxuLyoqKioqKi8gXHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcclxuLyoqKioqKi8gXHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gMTAwMDA7XHJcbi8qKioqKiovIFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcclxuLyoqKioqKi8gXHRcdH0gY2F0Y2goZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XHJcbi8qKioqKiovIFx0XHRcdGlmKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0Ly8gdGltZW91dFxyXG4vKioqKioqLyBcdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIikpO1xyXG4vKioqKioqLyBcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xyXG4vKioqKioqLyBcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcclxuLyoqKioqKi8gXHRcdFx0XHRjYWxsYmFjaygpO1xyXG4vKioqKioqLyBcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XHJcbi8qKioqKiovIFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxyXG4vKioqKioqLyBcdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xyXG4vKioqKioqLyBcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdC8vIHN1Y2Nlc3NcclxuLyoqKioqKi8gXHRcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH0gY2F0Y2goZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FsbGJhY2soZSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm47XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdGNhbGxiYWNrKG51bGwsIHVwZGF0ZSk7XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqL1xuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iZWY0NWIwL3NyYy9zaGFyZWQvdXRpbHMvY2FuRGVmaW5lUHJvcGVydHkuanNcclxuLyoqKioqKi8gXHR2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcclxuLyoqKioqKi8gXHR0cnkge1xyXG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInhcIiwge1xyXG4vKioqKioqLyBcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge31cclxuLyoqKioqKi8gXHRcdH0pO1xyXG4vKioqKioqLyBcdFx0Y2FuRGVmaW5lUHJvcGVydHkgPSB0cnVlO1xyXG4vKioqKioqLyBcdH0gY2F0Y2goeCkge1xyXG4vKioqKioqLyBcdFx0Ly8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcImUyZjgyZmY2YTViN2E5NjI3YTM0XCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRpZighbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xyXG4vKioqKioqLyBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xyXG4vKioqKioqLyBcdFx0XHRpZihtZS5ob3QuYWN0aXZlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpIDwgMClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA8IDApXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XHJcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXF1ZXN0ICsgXCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICsgbW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoY2FuRGVmaW5lUHJvcGVydHkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgKGZ1bmN0aW9uKG5hbWUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fShuYW1lKSkpO1xyXG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRmbltuYW1lXSA9IF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRmdW5jdGlvbiBlbnN1cmUoY2h1bmtJZCwgY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInJlYWR5XCIpXHJcbi8qKioqKiovIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuLyoqKioqKi8gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xyXG4vKioqKioqLyBcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCwgZnVuY3Rpb24oKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobnVsbCwgZm4pO1xyXG4vKioqKioqLyBcdFx0XHRcdH0gZmluYWxseSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0aWYoY2FuRGVmaW5lUHJvcGVydHkpIHtcclxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBcImVcIiwge1xyXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcbi8qKioqKiovIFx0XHRcdFx0dmFsdWU6IGVuc3VyZVxyXG4vKioqKioqLyBcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdGZuLmUgPSBlbnN1cmU7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHRyZXR1cm4gZm47XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0XHR2YXIgaG90ID0ge1xyXG4vKioqKioqLyBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXHJcbi8qKioqKiovIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXHJcbi8qKioqKiovIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXHJcbi8qKioqKiovIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxyXG4vKioqKioqLyBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcclxuLyoqKioqKi8gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIE1vZHVsZSBBUElcclxuLyoqKioqKi8gXHRcdFx0YWN0aXZlOiB0cnVlLFxyXG4vKioqKioqLyBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdFx0XHRpZih0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2s7XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2s7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm51bWJlclwiKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRlbHNlXHJcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcclxuLyoqKioqKi8gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxyXG4vKioqKioqLyBcdFx0XHRhcHBseTogaG90QXBwbHksXHJcbi8qKioqKiovIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFsKSByZXR1cm4gaG90U3RhdHVzO1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcclxuLyoqKioqKi8gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGhvdDtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XHJcbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcclxuLyoqKioqKi8gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcclxuLyoqKioqKi8gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuLyoqKioqKi8gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xyXG4vKioqKioqLyBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xyXG4vKioqKioqLyBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcclxuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdEF2YWlsaWJsZUZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdENhbGxiYWNrO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdC8vIFRoZSB1cGRhdGUgaW5mb1xyXG4vKioqKioqLyBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xyXG4vKioqKioqLyBcdFx0dmFyIGlzTnVtYmVyID0gKCtpZCkgKyBcIlwiID09PSBpZDtcclxuLyoqKioqKi8gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSwgY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xyXG4vKioqKioqLyBcdFx0aWYodHlwZW9mIGFwcGx5ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuLyoqKioqKi8gXHRcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGZhbHNlO1xyXG4vKioqKioqLyBcdFx0XHRjYWxsYmFjayA9IGFwcGx5O1xyXG4vKioqKioqLyBcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xyXG4vKioqKioqLyBcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKGVycikge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGVycikgdGhyb3cgZXJyO1xyXG4vKioqKioqLyBcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XHJcbi8qKioqKiovIFx0XHRob3REb3dubG9hZE1hbmlmZXN0KGZ1bmN0aW9uKGVyciwgdXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdGlmKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcbi8qKioqKiovIFx0XHRcdGlmKCF1cGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4vKioqKioqLyBcdFx0XHRcdGNhbGxiYWNrKG51bGwsIG51bGwpO1xyXG4vKioqKioqLyBcdFx0XHRcdHJldHVybjtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4vKioqKioqLyBcdFx0XHRob3RBdmFpbGlibGVGaWxlc01hcCA9IHt9O1xyXG4vKioqKioqLyBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHVwZGF0ZS5jLmxlbmd0aDsgaSsrKVxyXG4vKioqKioqLyBcdFx0XHRcdGhvdEF2YWlsaWJsZUZpbGVzTWFwW3VwZGF0ZS5jW2ldXSA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuLyoqKioqKi8gXHRcdFx0aG90Q2FsbGJhY2sgPSBjYWxsYmFjaztcclxuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlID0ge307XHJcbi8qKioqKiovIFx0XHRcdHZhciBjaHVua0lkID0gMDtcclxuLyoqKioqKi8gXHRcdFx0eyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmUtYmxvY2tzXHJcbi8qKioqKiovIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cclxuLyoqKioqKi8gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9KTtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0aWYoIWhvdEF2YWlsaWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuO1xyXG4vKioqKioqLyBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcclxuLyoqKioqKi8gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHRpZigtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xyXG4vKioqKioqLyBcdFx0aWYoIWhvdEF2YWlsaWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XHJcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xyXG4vKioqKioqLyBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xyXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XHJcbi8qKioqKiovIFx0XHR2YXIgY2FsbGJhY2sgPSBob3RDYWxsYmFjaztcclxuLyoqKioqKi8gXHRcdGhvdENhbGxiYWNrID0gbnVsbDtcclxuLyoqKioqKi8gXHRcdGlmKCFjYWxsYmFjaykgcmV0dXJuO1xyXG4vKioqKioqLyBcdFx0aWYoaG90QXBwbHlPblVwZGF0ZSkge1xyXG4vKioqKioqLyBcdFx0XHRob3RBcHBseShob3RBcHBseU9uVXBkYXRlLCBjYWxsYmFjayk7XHJcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbi8qKioqKiovIFx0XHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbi8qKioqKiovIFx0XHRpZihob3RTdGF0dXMgIT09IFwicmVhZHlcIikgdGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xyXG4vKioqKioqLyBcdFx0aWYodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4vKioqKioqLyBcdFx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XHJcbi8qKioqKiovIFx0XHRcdG9wdGlvbnMgPSB7fTtcclxuLyoqKioqKi8gXHRcdH0gZWxzZSBpZihvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiKSB7XHJcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoZXJyKSB0aHJvdyBlcnI7XHJcbi8qKioqKiovIFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRvcHRpb25zID0ge307XHJcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoZXJyKSB0aHJvdyBlcnI7XHJcbi8qKioqKiovIFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZSkge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW21vZHVsZV07XHJcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcclxuLyoqKioqKi8gXHRcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZighbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICsgbW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihtb2R1bGVJZCA9PT0gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJldHVybiBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgKyBtb2R1bGVJZCArIFwiIGluIFwiICsgcGFyZW50SWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpID49IDApIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHF1ZXVlLnB1c2gocGFyZW50SWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gW291dGRhdGVkTW9kdWxlcywgb3V0ZGF0ZWREZXBlbmRlbmNpZXNdO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xyXG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihhLmluZGV4T2YoaXRlbSkgPCAwKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0YS5wdXNoKGl0ZW0pO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxyXG4vKioqKioqLyBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxyXG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XHJcbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbi8qKioqKiovIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFyZXN1bHQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKG9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y29udGludWU7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiKSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdGlmKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHRbMF0pO1xyXG4vKioqKioqLyBcdFx0XHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gcmVzdWx0WzFdKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0WzFdLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHRbMV1bbW9kdWxlSWRdKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cclxuLyoqKioqKi8gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcclxuLyoqKioqKi8gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuLyoqKioqKi8gXHRcdFx0dmFyIG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxyXG4vKioqKioqLyBcdFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXHJcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xyXG4vKioqKioqLyBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XHJcbi8qKioqKiovIFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbi8qKioqKiovIFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xyXG4vKioqKioqLyBcdFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdGlmKCFtb2R1bGUpIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHR2YXIgZGF0YSA9IHt9O1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcclxuLyoqKioqKi8gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcclxuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcclxuLyoqKioqKi8gXHRcdFx0XHRjYihkYXRhKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxyXG4vKioqKioqLyBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcclxuLyoqKioqKi8gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxyXG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFjaGlsZCkgY29udGludWU7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXHJcbi8qKioqKiovIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXHJcbi8qKioqKiovIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4vKioqKioqLyBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aWYoY2FsbGJhY2tzLmluZGV4T2YoY2IpID49IDApIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgY2IgPSBjYWxsYmFja3NbaV07XHJcbi8qKioqKiovIFx0XHRcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYihvdXRkYXRlZERlcGVuZGVuY2llcyk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcclxuLyoqKioqKi8gXHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XHJcbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcclxuLyoqKioqKi8gXHRcdFx0fSBjYXRjaChlcnIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRpZih0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2UgaWYoIWVycm9yKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXHJcbi8qKioqKiovIFx0XHRpZihlcnJvcikge1xyXG4vKioqKioqLyBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuLyoqKioqKi8gXHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuLyoqKioqKi8gXHRcdFx0cGFyZW50czogaG90Q3VycmVudFBhcmVudHMsXG4vKioqKioqLyBcdFx0XHRjaGlsZHJlbjogW11cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1ZSUHV6emxlL3B1YmxpYy9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19oYXNoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgwKSgwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9nYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfZ2FtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nYW1lKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgZ2FtZSA9IG5ldyBfZ2FtZTIuZGVmYXVsdCgpO1xuXHRcblx0dmFyIGxvb3AgPSBmdW5jdGlvbiBsb29wKCkge1xuXHQgICAgZ2FtZS5yZW5kZXIoKTtcblx0ICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuXHR9O1xuXHRsb29wKCk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9tb3VzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX21vdXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vdXNlKTtcblx0XG5cdHZhciBfc3dlZXRhbGVydCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX3N3ZWV0YWxlcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3dlZXRhbGVydCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBHYW1lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gR2FtZSgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2FtZSk7XG5cdFxuXHQgICAgICAgIC8vIENyZWF0ZSBhIHRocmVlLmpzIHNjZW5lLlxuXHQgICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblx0XG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgdGhyZWUuanMgY2FtZXJhLlxuXHQgICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwMCk7XG5cdFxuXHQgICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAxMCwgMCk7XG5cdCAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBUSFJFRS5EZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzKHRoaXMuY2FtZXJhKTtcblx0XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcblx0ICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gMDtcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cdFxuXHQgICAgICAgIC8vIHJheWNhc3RlclxuXHQgICAgICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xuXHQgICAgICAgIHRoaXMubW91c2UgPSBuZXcgX21vdXNlMi5kZWZhdWx0KCk7XG5cdCAgICAgICAgLy9iaW5kIHRoaXNcblx0ICAgICAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZCA9IHRoaXMub25UZXh0dXJlTG9hZGVkLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5wbGFjZVBpZWNlcyA9IHRoaXMucGxhY2VQaWVjZXMuYmluZCh0aGlzKTtcblx0ICAgICAgICAvL1xuXHQgICAgICAgIHRoaXMubWVzaExpc3QgPSBbXTtcblx0ICAgICAgICB0aGlzLmxvZ0ZsYWcgPSB0cnVlO1xuXHQgICAgICAgIC8vIEFkZCBhIHJlcGVhdGluZyBncmlkIGFzIGEgc2t5Ym94LlxuXHQgICAgICAgIHRoaXMuYm94U2l6ZSA9IDMwO1xuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyLmxvYWQoXCJwdWJsaWMvaW1hZ2VzL2JveC5wbmdcIiwgdGhpcy5vblRleHR1cmVMb2FkZWQpXG5cdCAgICAgICAgLy8gbGV0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpXG5cdCAgICAgICAgdGhpcy5vblRleHR1cmVMb2FkZWQoKTtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB0cnVlKTtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInZyZGlzcGxheXByZXNlbnRjaGFuZ2VcIiwgdGhpcy5vblJlc2l6ZSwgdHJ1ZSlcblx0ICAgICAgICB0aGlzLmxhc3RSZW5kZXIgPSAwO1xuXHQgICAgICAgIHRoaXMuZGlzcGxheSA9IG51bGw7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEdhbWUsIFt7XG5cdCAgICAgICAga2V5OiBcIm9uVGV4dHVyZUxvYWRlZFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRleHR1cmVMb2FkZWQoKSB7XG5cdCAgICAgICAgICAgIC8vIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZ1xuXHQgICAgICAgICAgICAvLyB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcblx0ICAgICAgICAgICAgLy8gdGV4dHVyZS5yZXBlYXQuc2V0KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplKVxuXHRcblx0ICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUpO1xuXHQgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjAwZmYsIHNpZGU6IFRIUkVFLkJhY2tTaWRlLCB3aXJlZnJhbWU6IHRydWUgfSk7XG5cdFxuXHQgICAgICAgICAgICAvLyBBbGlnbiB0aGUgc2t5Ym94IHRvIHRoZSBmbG9vciAod2hpY2ggaXMgYXQgeT0wKS5cblx0ICAgICAgICAgICAgdGhpcy5za3lib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuXHQgICAgICAgICAgICB0aGlzLnNreWJveC5wb3NpdGlvbi55ID0gdGhpcy5ib3hTaXplIC8gMjtcblx0ICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5za3lib3gpO1xuXHQgICAgICAgICAgICB0aGlzLnBsYWNlUGllY2VzKCk7XG5cdCAgICAgICAgICAgIHRoaXMucGxhY2VTcGhlcmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBsYWNlU3BoZXJlXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlU3BoZXJlKCkge1xuXHQgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoNTAsIDE2LCA4KTtcblx0ICAgICAgICAgICAgZ2VvbWV0cnkuc2NhbGUoLTEsIDEsIDEpO1xuXHQgICAgICAgICAgICAvLyBnZW9tZXRyeS5zY2FsZSggLSAxLCAxLCAxICk7XG5cdCAgICAgICAgICAgIC8vIHZhciBzcGhlcmUgPSByZXF1aXJlKFwiLi4vLi4vcHVibGljL2ltYWdlcy9zcGhlcmUgKDIpLmpwZ1wiKVxuXHQgICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcblx0ICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICAgICAgICBsb2FkZXIubG9hZChcInB1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIiwgZnVuY3Rpb24gKHRleHR1cmUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdCAgICAgICAgICAgICAgICAgICAgbWFwOiB0ZXh0dXJlXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5cdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNoKTtcblx0ICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KDAsIDAsIDEwKTtcblx0ICAgICAgICAgICAgICAgIHNlbGYuc2NlbmUuYWRkKG1lc2gpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBsYWNlUGllY2VzXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlUGllY2VzKCkge1xuXHRcblx0ICAgICAgICAgICAgdGhpcy5jb2x1bW5OdW1iZXIgPSA0O1xuXHQgICAgICAgICAgICB0aGlzLnBpZWNlTnVtYmVyID0gdGhpcy5jb2x1bW5OdW1iZXIgKiB0aGlzLmNvbHVtbk51bWJlcjtcblx0ICAgICAgICAgICAgdGhpcy5zY2FsZWRXaWR0aCA9IDE2O1xuXHQgICAgICAgICAgICB0aGlzLnNjYWxlZEhlaWdodCA9IDk7XG5cdCAgICAgICAgICAgIHRoaXMuZnJlZVBpZWNlTnVtYmVyID0gdGhpcy5waWVjZU51bWJlciAqIDEgLyAyO1xuXHQgICAgICAgICAgICB0aGlzLmZyZWVQaWVjZUxpc3QgPSBbXTtcblx0ICAgICAgICAgICAgdGhpcy5wbGFuZVdpZHRoID0gdGhpcy5zY2FsZWRXaWR0aCAvIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnBsYW5lSGVpZ2h0ID0gdGhpcy5zY2FsZWRIZWlnaHQgLyB0aGlzLmNvbHVtbk51bWJlcjtcblx0ICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBudWxsOyAvL3RoZSBsYXN0IGNsaWNrZWQgbWVzaElkXG5cdCAgICAgICAgICAgIHRoaXMuaG9sZE1hcCA9IHt9O1xuXHQgICAgICAgICAgICB0aGlzLm1lc2hDYW52YXNNYXAgPSB7fTtcblx0ICAgICAgICAgICAgLy8gdGhpcy5cblx0ICAgICAgICAgICAgLy8gbG9hZCBhbiBpbWFnZVxuXHQgICAgICAgICAgICB2YXIgaW1hZ2VPYmogPSBuZXcgSW1hZ2UoKTtcblx0ICAgICAgICAgICAgaW1hZ2VPYmouc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0ICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cdCAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0ICAgICAgICAgICAgdmFyIHdzID0gY2FudmFzLndpZHRoIC8gMS41IC8gaW1hZ2VPYmoud2lkdGg7XG5cdCAgICAgICAgICAgIHZhciBocyA9IGNhbnZhcy5oZWlnaHQgLyAxLjUgLyBpbWFnZU9iai5oZWlnaHQ7XG5cdCAgICAgICAgICAgIHRoaXMuc2NhbGUgPSBNYXRoLm1pbih3cywgaHMpO1xuXHQgICAgICAgICAgICB0aGlzLnBpZWNlV2lkdGggPSBpbWFnZU9iai53aWR0aCAvIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnBpZWNlSGVpZ2h0ID0gaW1hZ2VPYmouaGVpZ2h0IC8gdGhpcy5jb2x1bW5OdW1iZXI7XG5cdCAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucGllY2VXaWR0aCx0aGlzLnBpZWNlSGVpZ2h0KVxuXHQgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICAgICAgICAgIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbmRleCA9IDAsIHRleHR1cmUsIG1hdGVyaWFsLCBtZXNoOyBpIDwgc2VsZi5jb2x1bW5OdW1iZXI7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5jb2x1bW5OdW1iZXI7IGorKywgaW5kZXgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKGNhbnZhcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLCBpICogc2VsZi5waWVjZVdpZHRoLCBqICogc2VsZi5waWVjZUhlaWdodCwgc2VsZi5waWVjZVdpZHRoLCBzZWxmLnBpZWNlSGVpZ2h0LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZSkgLy8gY2hlY2tzIGlmIHRleHR1cmUgZXhpc3RzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGV4dHVyZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gZmFsc2U7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2VsZi5wbGFuZVdpZHRoLCBzZWxmLnBsYW5lSGVpZ2h0KSwgbWF0ZXJpYWwpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5kb20gPCBzZWxmLmZyZWVQaWVjZU51bWJlciAvIChzZWxmLmNvbHVtbk51bWJlciAqIHNlbGYuY29sdW1uTnVtYmVyIC0gaW5kZXgpICYmIHNlbGYuZnJlZVBpZWNlTnVtYmVyID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKHNlbGYuYm94U2l6ZSAtIHNlbGYucGxhbmVXaWR0aCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeiA9IC1zZWxmLmJveFNpemUgLyAyICsgc2VsZi5wbGFuZUhlaWdodCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKHNlbGYuYm94U2l6ZSAtIHNlbGYucGxhbmVIZWlnaHQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChNYXRoLnJvdW5kKHgpLCAwLjUsIE1hdGgucm91bmQoeikpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJsYW5rTWVzaCA9IG1lc2guY2xvbmUoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG9sZE1hcFttZXNoLmlkXSA9IGJsYW5rTWVzaDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5yb3RhdGlvbi54ID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IDB4ODA4MDgwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxhbmtNZXNoLnBvc2l0aW9uLnNldChpICogc2VsZi5wbGFuZVdpZHRoIC0gc2VsZi5zY2FsZWRXaWR0aCAvIDIgKyBzZWxmLnBsYW5lV2lkdGggLyAyLCA1ICsgc2VsZi5zY2FsZWRIZWlnaHQgLSBzZWxmLnBsYW5lSGVpZ2h0IC8gMiAtIGogKiBzZWxmLnBsYW5lSGVpZ2h0LCAtOS45OSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNjZW5lLmFkZChibGFua01lc2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcmVlUGllY2VOdW1iZXItLTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnJlZVBpZWNlTGlzdC5wdXNoKG1lc2guaWQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNoQ2FudmFzTWFwW21lc2guaWRdID0gY2FudmFzO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoaSAqIHNlbGYucGxhbmVXaWR0aCAtIHNlbGYuc2NhbGVkV2lkdGggLyAyICsgc2VsZi5wbGFuZVdpZHRoIC8gMiwgNSArIHNlbGYuc2NhbGVkSGVpZ2h0IC0gc2VsZi5wbGFuZUhlaWdodCAvIDIgLSBqICogc2VsZi5wbGFuZUhlaWdodCwgLTkuOTkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lc2gucG9zaXRpb24uc2V0KDAsIDIsLTkpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaExpc3QucHVzaChtZXNoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQobWVzaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHR5cGVvZiB0aGlzLnNjZW5lKVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgKDAsIF9zd2VldGFsZXJ0Mi5kZWZhdWx0KSh7XG5cdCAgICAgICAgICAgICAgICB0aXRsZTogXCLmj5DnpLpcIixcblx0ICAgICAgICAgICAgICAgIHRleHQ6IFwi5oqK5bGP5bmV5Lit5aSu55qE5bCP5omL5a+55YeG5Zyw5LiK55qE5Zu+54mH77yM54K55Ye75oyJ6ZKu5o2h6LW377yM5YaN5oqK5Zu+54mH5a+55YeG5Y6f5Zu+5L2N572u77yM54K55Ye76LS05LiKXCIsXG5cdCAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCLnn6XpgZPkuoZcIlxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInJlbmRlclwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIodGltZXN0YW1wKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBkZWx0YSA9IE1hdGgubWluKHRpbWVzdGFtcCAtIHRoaXMubGFzdFJlbmRlciwgNTAwKVxuXHQgICAgICAgICAgICB0aGlzLmxhc3RSZW5kZXIgPSB0aW1lc3RhbXA7XG5cdCAgICAgICAgICAgIC8v5aSE55CG6byg5qCH54K55Ye7XG5cdCAgICAgICAgICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5tb3VzZSwgdGhpcy5jYW1lcmEpO1xuXHQgICAgICAgICAgICB2YXIgaW50ZXJzZWN0cyA9IHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHModGhpcy5zY2VuZS5jaGlsZHJlbik7XG5cdCAgICAgICAgICAgIHRoaXMubW91c2UueCA9IHRoaXMubW91c2UueSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW50ZXJzZWN0cyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2xpY2tGbGFnID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMubWVzaExpc3RbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNoID0gX3N0ZXAudmFsdWU7XG5cdFxuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKG1lc2guaWQpID4gLTEgJiYgbWVzaC5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVzaC5tYXRlcmlhbC5jb2xvci5zZXQoMHhmZjAwMDApXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lc2ggIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG1lc2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlLnBpY2tCdG4uaW5uZXJIVE1MID0gXCLotLTkuIpcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrRmxhZyA9IHRydWU7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC52aXNpYmxlID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKS5hcHBlbmRDaGlsZCh0aGlzLm1lc2hDYW52YXNNYXBbbWVzaC5pZF0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lc2ggJiYgdGhpcy5ob2xkTWFwW3RoaXMuc2VsZWN0ZWRNZXNoLmlkXS5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gaW50ZXJzZWN0c1swXS5vYmplY3QucG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gucG9zaXRpb24uc2V0KHQueCwgdC55LCB0LnopO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRNYXBbdGhpcy5zZWxlY3RlZE1lc2guaWRdLnBvc2l0aW9uLnogLT0gMTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC52aXNpYmxlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlLnBpY2tCdG4uaW5uZXJIVE1MID0gXCLmjaHotbdcIjtcblx0ICAgICAgICAgICAgICAgICAgICAvL+WcqOacquaLvOaIkOWbvueJh+WIl+ihqOS4reWPluWHuuW9k+WJjemhuVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZnJlZVBpZWNlTGlzdC5zcGxpY2UodGhpcy5mcmVlUGllY2VMaXN0LmluZGV4T2YodGhpcy5zZWxlY3RlZE1lc2guaWQpLCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICAvL+a4healmuW9k+WJjemAieWPlueahOWbvuWDj1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lc2ggJiYgIWNsaWNrRmxhZykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2UucGlja0J0bi5pbm5lckhUTUwgPSBcIuaNoei1t1wiO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKCk7XG5cdCAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcblx0XG5cdCAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlcik7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJvblJlc2l6ZVwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlc2l6ZShlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuXHQgICAgICAgICAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdCAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImNsZWFyQ2FudmFzXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyQ2FudmFzKCkge1xuXHQgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaW4gY2FudmFzXCIpO1xuXHQgICAgICAgICAgICB2YXIgcGluID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaW5cIik7XG5cdCAgICAgICAgICAgIHdoaWxlIChjYW52YXMpIHtcblx0ICAgICAgICAgICAgICAgIHBpbi5yZW1vdmVDaGlsZChjYW52YXMpO1xuXHQgICAgICAgICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaW4gY2FudmFzXCIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBHYW1lO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBHYW1lO1xuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIE1vdXNlID0gZnVuY3Rpb24gKF9USFJFRSRWZWN0b3IpIHtcblx0ICAgIF9pbmhlcml0cyhNb3VzZSwgX1RIUkVFJFZlY3Rvcik7XG5cdFxuXHQgICAgZnVuY3Rpb24gTW91c2UocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW91c2UpO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW91c2UpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0XG5cdCAgICAgICAgX3RoaXMueCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICBfdGhpcy55ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImNsaWNrXCIsIHRoaXMub25Nb3VzZUNsaWNrLmJpbmQodGhpcyksIGZhbHNlIClcblx0ICAgICAgICBfdGhpcy5waWNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaWNrLWJ0blwiKTtcblx0ICAgICAgICBfdGhpcy5waWNrSGFuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGljay1oYW5kXCIpO1xuXHQgICAgICAgIF90aGlzLnBpY2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF90aGlzLmJ0bk9uQ2xpY2suYmluZChfdGhpcyksIGZhbHNlKTtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5vbk1vdXNlQ2xpY2suYmluZCh0aGlzKSxmYWxzZSlcblx0ICAgICAgICByZXR1cm4gX3RoaXM7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKE1vdXNlLCBbe1xuXHQgICAgICAgIGtleTogXCJvbk1vdXNlQ2xpY2tcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25Nb3VzZUNsaWNrKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBtb3VzZSBwb3NpdGlvbiBpbiBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlc1xuXHQgICAgICAgICAgICAvLyAoLTEgdG8gKzEpIGZvciBib3RoIGNvbXBvbmVudHNcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG5cdCAgICAgICAgICAgIHRoaXMueCA9IGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCAqIDIgLSAxO1xuXHQgICAgICAgICAgICB0aGlzLnkgPSAtKGV2ZW50LmNsaWVudFkgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogMiArIDE7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMueCwgdGhpcy55KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImJ0bk9uQ2xpY2tcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnRuT25DbGljayhldmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLnggPSAwLjQ2ICogMiAtIDE7XG5cdCAgICAgICAgICAgIHRoaXMueSA9IC0wLjM4ICogMiArIDE7XG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMueCwgdGhpcy55KTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIE1vdXNlO1xuXHR9KFRIUkVFLlZlY3RvcjIpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTW91c2U7XG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiaW1hZ2VzL3B1enpsZXMvY2FydG9vbiAoNSkuanBnXCI7XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHN3ZWV0YWxlcnQ7XG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIFZSUHV6emxlLmJ1bmRsZS5qc1xuICoqLyIsIiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0dGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSBcclxuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XHJcbiBcdFx0aWYocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuIFx0XHRzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XHJcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcclxuIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QoY2FsbGJhY2spIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdGlmKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xyXG4gXHRcdHRyeSB7XHJcbiBcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gXHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XHJcbiBcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xyXG4gXHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gMTAwMDA7XHJcbiBcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XHJcbiBcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG4gXHRcdH1cclxuIFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gXHRcdFx0aWYocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XHJcbiBcdFx0XHRpZihyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xyXG4gXHRcdFx0XHQvLyB0aW1lb3V0XHJcbiBcdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIikpO1xyXG4gXHRcdFx0fSBlbHNlIGlmKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcclxuIFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxyXG4gXHRcdFx0XHRjYWxsYmFjaygpO1xyXG4gXHRcdFx0fSBlbHNlIGlmKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xyXG4gXHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXHJcbiBcdFx0XHRcdGNhbGxiYWNrKG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xyXG4gXHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0Ly8gc3VjY2Vzc1xyXG4gXHRcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuIFx0XHRcdFx0fSBjYXRjaChlKSB7XHJcbiBcdFx0XHRcdFx0Y2FsbGJhY2soZSk7XHJcbiBcdFx0XHRcdFx0cmV0dXJuO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGNhbGxiYWNrKG51bGwsIHVwZGF0ZSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fTtcclxuIFx0fVxyXG5cbiBcdFxyXG4gXHRcclxuIFx0Ly8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYmVmNDViMC9zcmMvc2hhcmVkL3V0aWxzL2NhbkRlZmluZVByb3BlcnR5LmpzXHJcbiBcdHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xyXG4gXHR0cnkge1xyXG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJ4XCIsIHtcclxuIFx0XHRcdGdldDogZnVuY3Rpb24oKSB7fVxyXG4gXHRcdH0pO1xyXG4gXHRcdGNhbkRlZmluZVByb3BlcnR5ID0gdHJ1ZTtcclxuIFx0fSBjYXRjaCh4KSB7XHJcbiBcdFx0Ly8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5XHJcbiBcdH1cclxuIFx0XHJcbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcclxuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJlMmY4MmZmNmE1YjdhOTYyN2EzNFwiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xyXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0aWYoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcclxuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiBcdFx0XHRpZihtZS5ob3QuYWN0aXZlKSB7XHJcbiBcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcclxuIFx0XHRcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPCAwKVxyXG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xyXG4gXHRcdFx0XHRcdGlmKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPCAwKVxyXG4gXHRcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcclxuIFx0XHRcdFx0fSBlbHNlIGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcclxuIFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlcXVlc3QgKyBcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgKyBtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcclxuIFx0XHR9O1xyXG4gXHRcdGZvcih2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkpIHtcclxuIFx0XHRcdFx0aWYoY2FuRGVmaW5lUHJvcGVydHkpIHtcclxuIFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIChmdW5jdGlvbihuYW1lKSB7XHJcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcbiBcdFx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcbiBcdFx0XHRcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XHJcbiBcdFx0XHRcdFx0XHRcdH0sXHJcbiBcdFx0XHRcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuIFx0XHRcdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XHJcbiBcdFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdH07XHJcbiBcdFx0XHRcdFx0fShuYW1lKSkpO1xyXG4gXHRcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRcdGZuW25hbWVdID0gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0ZnVuY3Rpb24gZW5zdXJlKGNodW5rSWQsIGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicmVhZHlcIilcclxuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcclxuIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkLCBmdW5jdGlvbigpIHtcclxuIFx0XHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKG51bGwsIGZuKTtcclxuIFx0XHRcdFx0fSBmaW5hbGx5IHtcclxuIFx0XHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcclxuIFx0XHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xyXG4gXHRcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcclxuIFx0XHRcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdFx0aWYoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcclxuIFx0XHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fSk7XHJcbiBcdFx0fVxyXG4gXHRcdGlmKGNhbkRlZmluZVByb3BlcnR5KSB7XHJcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIFwiZVwiLCB7XHJcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcbiBcdFx0XHRcdHZhbHVlOiBlbnN1cmVcclxuIFx0XHRcdH0pO1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRmbi5lID0gZW5zdXJlO1xyXG4gXHRcdH1cclxuIFx0XHRyZXR1cm4gZm47XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0dmFyIGhvdCA9IHtcclxuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcclxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXHJcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXHJcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcclxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxyXG4gXHRcclxuIFx0XHRcdC8vIE1vZHVsZSBBUElcclxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcclxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xyXG4gXHRcdFx0XHRpZih0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKVxyXG4gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcclxuIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcclxuIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2s7XHJcbiBcdFx0XHRcdGVsc2VcclxuIFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjaztcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcclxuIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdFx0XHRob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJudW1iZXJcIilcclxuIFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xyXG4gXHRcdFx0XHRlbHNlXHJcbiBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdH0sXHJcbiBcdFxyXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcclxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcclxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcclxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHRpZighbCkgcmV0dXJuIGhvdFN0YXR1cztcclxuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XHJcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcclxuIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHJcbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcclxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxyXG4gXHRcdH07XHJcbiBcdFx0cmV0dXJuIGhvdDtcclxuIFx0fVxyXG4gXHRcclxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XHJcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcclxuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XHJcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xyXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcclxuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xyXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XHJcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4gXHR2YXIgaG90QXZhaWxpYmxlRmlsZXNNYXAgPSB7fTtcclxuIFx0dmFyIGhvdENhbGxiYWNrO1xyXG4gXHRcclxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXHJcbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XHJcbiBcdFx0dmFyIGlzTnVtYmVyID0gKCtpZCkgKyBcIlwiID09PSBpZDtcclxuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHksIGNhbGxiYWNrKSB7XHJcbiBcdFx0aWYoaG90U3RhdHVzICE9PSBcImlkbGVcIikgdGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XHJcbiBcdFx0aWYodHlwZW9mIGFwcGx5ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuIFx0XHRcdGhvdEFwcGx5T25VcGRhdGUgPSBmYWxzZTtcclxuIFx0XHRcdGNhbGxiYWNrID0gYXBwbHk7XHJcbiBcdFx0fSBlbHNlIHtcclxuIFx0XHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcclxuIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7XHJcbiBcdFx0XHRcdGlmKGVycikgdGhyb3cgZXJyO1xyXG4gXHRcdFx0fTtcclxuIFx0XHR9XHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XHJcbiBcdFx0aG90RG93bmxvYWRNYW5pZmVzdChmdW5jdGlvbihlcnIsIHVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuIFx0XHRcdGlmKCF1cGRhdGUpIHtcclxuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuIFx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgbnVsbCk7XHJcbiBcdFx0XHRcdHJldHVybjtcclxuIFx0XHRcdH1cclxuIFx0XHJcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4gXHRcdFx0aG90QXZhaWxpYmxlRmlsZXNNYXAgPSB7fTtcclxuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xyXG4gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHVwZGF0ZS5jLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0XHRob3RBdmFpbGlibGVGaWxlc01hcFt1cGRhdGUuY1tpXV0gPSB0cnVlO1xyXG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xyXG4gXHRcclxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XHJcbiBcdFx0XHRob3RDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gXHRcdFx0aG90VXBkYXRlID0ge307XHJcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XHJcbiBcdFx0XHR7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZS1ibG9ja3NcclxuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cclxuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuIFx0XHRcdH1cclxuIFx0XHR9KTtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdGlmKCFob3RBdmFpbGlibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXHJcbiBcdFx0XHRyZXR1cm47XHJcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcclxuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHRpZigtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XHJcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XHJcbiBcdFx0aWYoIWhvdEF2YWlsaWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4gXHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcclxuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xyXG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xyXG4gXHRcdHZhciBjYWxsYmFjayA9IGhvdENhbGxiYWNrO1xyXG4gXHRcdGhvdENhbGxiYWNrID0gbnVsbDtcclxuIFx0XHRpZighY2FsbGJhY2spIHJldHVybjtcclxuIFx0XHRpZihob3RBcHBseU9uVXBkYXRlKSB7XHJcbiBcdFx0XHRob3RBcHBseShob3RBcHBseU9uVXBkYXRlLCBjYWxsYmFjayk7XHJcbiBcdFx0fSBlbHNlIHtcclxuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuIFx0XHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbiBcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xyXG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdFx0Y2FsbGJhY2sobnVsbCwgb3V0ZGF0ZWRNb2R1bGVzKTtcclxuIFx0XHR9XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiBcdFx0aWYoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpIHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcclxuIFx0XHRpZih0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiBcdFx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XHJcbiBcdFx0XHRvcHRpb25zID0ge307XHJcbiBcdFx0fSBlbHNlIGlmKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcclxuIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7XHJcbiBcdFx0XHRcdGlmKGVycikgdGhyb3cgZXJyO1xyXG4gXHRcdFx0fTtcclxuIFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0b3B0aW9ucyA9IHt9O1xyXG4gXHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbihlcnIpIHtcclxuIFx0XHRcdFx0aWYoZXJyKSB0aHJvdyBlcnI7XHJcbiBcdFx0XHR9O1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGUpIHtcclxuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbbW9kdWxlXTtcclxuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4gXHRcclxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xyXG4gXHRcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRpZighbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZClcclxuIFx0XHRcdFx0XHRjb250aW51ZTtcclxuIFx0XHRcdFx0aWYobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICsgbW9kdWxlSWQpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKG1vZHVsZUlkID09PSAwKSB7XHJcbiBcdFx0XHRcdFx0cmV0dXJuO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xyXG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcclxuIFx0XHRcdFx0XHRpZihwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcclxuIFx0XHRcdFx0XHRcdHJldHVybiBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgKyBtb2R1bGVJZCArIFwiIGluIFwiICsgcGFyZW50SWQpO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRpZihvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgPj0gMCkgY29udGludWU7XHJcbiBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxyXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcclxuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XHJcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcclxuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XHJcbiBcdFx0XHRcdFx0cXVldWUucHVzaChwYXJlbnRJZCk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHJcbiBcdFx0XHRyZXR1cm4gW291dGRhdGVkTW9kdWxlcywgb3V0ZGF0ZWREZXBlbmRlbmNpZXNdO1xyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xyXG4gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xyXG4gXHRcdFx0XHRpZihhLmluZGV4T2YoaXRlbSkgPCAwKVxyXG4gXHRcdFx0XHRcdGEucHVzaChpdGVtKTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXHJcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxyXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xyXG4gXHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XHJcbiBcdFx0XHRcdHZhciByZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcclxuIFx0XHRcdFx0aWYoIXJlc3VsdCkge1xyXG4gXHRcdFx0XHRcdGlmKG9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcclxuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xyXG4gXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiKSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcclxuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuIFx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2socmVzdWx0KTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XHJcbiBcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0WzBdKTtcclxuIFx0XHRcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiByZXN1bHRbMV0pIHtcclxuIFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0WzFdLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXHJcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xyXG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHRbMV1bbW9kdWxlSWRdKTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cclxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0dmFyIG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xyXG4gXHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiYgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQpXHJcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcclxuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcclxuIFx0XHRcdFx0fSk7XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xyXG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xyXG4gXHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuIFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xyXG4gXHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0aWYoIW1vZHVsZSkgY29udGludWU7XHJcbiBcdFxyXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcclxuIFx0XHJcbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcclxuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XHJcbiBcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdHZhciBjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcclxuIFx0XHRcdFx0Y2IoZGF0YSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xyXG4gXHRcclxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXHJcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xyXG4gXHRcclxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxyXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcclxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXHJcbiBcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcclxuIFx0XHRcdFx0aWYoIWNoaWxkKSBjb250aW51ZTtcclxuIFx0XHRcdFx0dmFyIGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSB7XHJcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cclxuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcclxuIFx0XHRcdFx0XHR2YXIgaWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XHJcbiBcdFx0XHRcdFx0aWYoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxyXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xyXG4gXHRcclxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XHJcbiBcdFxyXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxyXG4gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcclxuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xyXG4gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XHJcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XHJcbiBcdFx0XHRcdFx0dmFyIGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XHJcbiBcdFx0XHRcdFx0aWYoY2FsbGJhY2tzLmluZGV4T2YoY2IpID49IDApIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdFx0dmFyIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gXHRcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0XHRjYihvdXRkYXRlZERlcGVuZGVuY2llcyk7XHJcbiBcdFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xyXG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xyXG4gXHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XHJcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XHJcbiBcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcclxuIFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdGlmKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiBcdFx0XHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XHJcbiBcdFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9IGVsc2UgaWYoIWVycm9yKVxyXG4gXHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcclxuIFx0XHRpZihlcnJvcikge1xyXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcclxuIFx0XHRcdHJldHVybiBjYWxsYmFjayhlcnJvcik7XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4gXHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XHJcbiBcdH1cclxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2UsXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IGhvdEN1cnJlbnRQYXJlbnRzLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvVlJQdXp6bGUvcHVibGljL1wiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDApKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgZTJmODJmZjZhNWI3YTk2MjdhMzRcbiAqKi8iLCJpbXBvcnQgR2FtZSBmcm9tIFwiLi9nYW1lLmpzXCJcclxubGV0IGdhbWUgPSBuZXcgR2FtZSgpXHJcblxyXG5jb25zdCBsb29wID0gKCk9PntcclxuICAgIGdhbWUucmVuZGVyKClcclxuICAgIC8vIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxyXG59XHJcbmxvb3AoKVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qYXZhc2NyaXB0cy9pbmRleC5qc1xuICoqLyIsIlxyXG5pbXBvcnQgTW91c2UgZnJvbSBcIi4vbW91c2UuanNcIlxyXG5pbXBvcnQgc3dlZXRhbGVydCBmcm9tIFwic3dlZXRhbGVydFwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIENyZWF0ZSBhIHRocmVlLmpzIHNjZW5lLlxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSB0aHJlZS5qcyBjYW1lcmEuXHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDAwKVxyXG5cclxuICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi5zZXQoMCwxMCwwKVxyXG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBuZXcgVEhSRUUuRGV2aWNlT3JpZW50YXRpb25Db250cm9scyggdGhpcy5jYW1lcmEgKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcclxuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblx0XHR0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICk7XHJcblx0XHR0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcblx0XHR0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cdFx0dGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnRvcCA9IDA7XHJcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgICAgIC8vIHJheWNhc3RlclxyXG4gICAgICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpXHJcbiAgICAgICAgdGhpcy5tb3VzZSA9IG5ldyBNb3VzZSgpXHJcbiAgICAgICAgICAgIC8vYmluZCB0aGlzXHJcbiAgICAgICAgdGhpcy5vblRleHR1cmVMb2FkZWQgPSB0aGlzLm9uVGV4dHVyZUxvYWRlZC5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMucGxhY2VQaWVjZXMgPSB0aGlzLnBsYWNlUGllY2VzLmJpbmQodGhpcylcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICB0aGlzLm1lc2hMaXN0ID0gW11cclxuICAgICAgICB0aGlzLmxvZ0ZsYWcgPSB0cnVlXHJcbiAgICAgICAgICAgIC8vIEFkZCBhIHJlcGVhdGluZyBncmlkIGFzIGEgc2t5Ym94LlxyXG4gICAgICAgIHRoaXMuYm94U2l6ZSA9IDMwXHJcbiAgICAgICAgLy8gdGhpcy5sb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpXHJcbiAgICAgICAgLy8gdGhpcy5sb2FkZXIubG9hZChcInB1YmxpYy9pbWFnZXMvYm94LnBuZ1wiLCB0aGlzLm9uVGV4dHVyZUxvYWRlZClcclxuICAgICAgICAvLyBsZXQgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKClcclxuICAgICAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZCgpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblJlc2l6ZSwgdHJ1ZSlcclxuICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInZyZGlzcGxheXByZXNlbnRjaGFuZ2VcIiwgdGhpcy5vblJlc2l6ZSwgdHJ1ZSlcclxuICAgICAgICB0aGlzLmxhc3RSZW5kZXIgPSAwXHJcbiAgICAgICAgdGhpcy5kaXNwbGF5ID0gbnVsbFxyXG4gICAgfVxyXG4gICAgb25UZXh0dXJlTG9hZGVkKCkge1xyXG4gICAgICAgIC8vIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZ1xyXG4gICAgICAgIC8vIHRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZ1xyXG4gICAgICAgIC8vIHRleHR1cmUucmVwZWF0LnNldCh0aGlzLmJveFNpemUsIHRoaXMuYm94U2l6ZSlcclxuXHJcbiAgICAgICAgbGV0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUpXHJcbiAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmYwMGZmLCBzaWRlOiBUSFJFRS5CYWNrU2lkZSwgd2lyZWZyYW1lOiB0cnVlIH0gKVxyXG5cclxuICAgICAgICAvLyBBbGlnbiB0aGUgc2t5Ym94IHRvIHRoZSBmbG9vciAod2hpY2ggaXMgYXQgeT0wKS5cclxuICAgICAgICB0aGlzLnNreWJveCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbClcclxuICAgICAgICB0aGlzLnNreWJveC5wb3NpdGlvbi55ID0gdGhpcy5ib3hTaXplIC8gMlxyXG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuc2t5Ym94KVxyXG4gICAgICAgIHRoaXMucGxhY2VQaWVjZXMoKVxyXG4gICAgICAgIHRoaXMucGxhY2VTcGhlcmUoKVxyXG4gICAgfVxyXG4gICAgcGxhY2VTcGhlcmUoKXtcclxuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoIDUwLCAxNiwgOCApO1xyXG4gICAgICAgIGdlb21ldHJ5LnNjYWxlKC0xLDEsMSlcclxuXHRcdC8vIGdlb21ldHJ5LnNjYWxlKCAtIDEsIDEsIDEgKTtcclxuICAgICAgICAvLyB2YXIgc3BoZXJlID0gcmVxdWlyZShcIi4uLy4uL3B1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIilcclxuICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpc1xyXG4gICAgICAgIGxvYWRlci5sb2FkKFwicHVibGljL2ltYWdlcy9zcGhlcmUgKDIpLmpwZ1wiLGZ1bmN0aW9uKHRleHR1cmUpe1xyXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtcclxuICAgIFx0XHRcdG1hcDogdGV4dHVyZVxyXG4gICAgXHRcdH0gKTtcclxuXHJcbiAgICBcdFx0dmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc2gpXHJcbiAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KDAsMCwxMClcclxuICAgIFx0XHRzZWxmLnNjZW5lLmFkZCggbWVzaCApO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBwbGFjZVBpZWNlcygpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jb2x1bW5OdW1iZXIgPSA0XHJcbiAgICAgICAgdGhpcy5waWVjZU51bWJlciA9IHRoaXMuY29sdW1uTnVtYmVyICogdGhpcy5jb2x1bW5OdW1iZXJcclxuICAgICAgICB0aGlzLnNjYWxlZFdpZHRoID0gMTZcclxuICAgICAgICB0aGlzLnNjYWxlZEhlaWdodCA9IDlcclxuICAgICAgICB0aGlzLmZyZWVQaWVjZU51bWJlciA9IHRoaXMucGllY2VOdW1iZXIgKiAxIC8gMlxyXG4gICAgICAgIHRoaXMuZnJlZVBpZWNlTGlzdCA9IFtdXHJcbiAgICAgICAgdGhpcy5wbGFuZVdpZHRoID0gdGhpcy5zY2FsZWRXaWR0aCAvIHRoaXMuY29sdW1uTnVtYmVyXHJcbiAgICAgICAgdGhpcy5wbGFuZUhlaWdodCA9IHRoaXMuc2NhbGVkSGVpZ2h0IC8gdGhpcy5jb2x1bW5OdW1iZXJcclxuICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGwgLy90aGUgbGFzdCBjbGlja2VkIG1lc2hJZFxyXG4gICAgICAgIHRoaXMuaG9sZE1hcCA9IHt9XHJcbiAgICAgICAgdGhpcy5tZXNoQ2FudmFzTWFwID0ge31cclxuICAgICAgICAvLyB0aGlzLlxyXG4gICAgICAgICAgICAvLyBsb2FkIGFuIGltYWdlXHJcbiAgICAgICAgbGV0IGltYWdlT2JqID0gbmV3IEltYWdlKClcclxuICAgICAgICBpbWFnZU9iai5zcmMgPSByZXF1aXJlKFwiLi4vLi4vcHVibGljL2ltYWdlcy9wdXp6bGVzL2NhcnRvb24gKDUpLmpwZ1wiKVxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXHJcbiAgICAgICAgbGV0IHdzID0gKGNhbnZhcy53aWR0aCAvIDEuNSkgLyBpbWFnZU9iai53aWR0aFxyXG4gICAgICAgIGxldCBocyA9IChjYW52YXMuaGVpZ2h0IC8gMS41KSAvIGltYWdlT2JqLmhlaWdodFxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBNYXRoLm1pbih3cywgaHMpXHJcbiAgICAgICAgdGhpcy5waWVjZVdpZHRoID0gaW1hZ2VPYmoud2lkdGggLyB0aGlzLmNvbHVtbk51bWJlclxyXG4gICAgICAgIHRoaXMucGllY2VIZWlnaHQgPSBpbWFnZU9iai5oZWlnaHQgLyB0aGlzLmNvbHVtbk51bWJlclxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBpZWNlV2lkdGgsdGhpcy5waWVjZUhlaWdodClcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXNcclxuICAgICAgICBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGluZGV4ID0gMCwgdGV4dHVyZSwgbWF0ZXJpYWwsIG1lc2g7IGkgPCBzZWxmLmNvbHVtbk51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNlbGYuY29sdW1uTnVtYmVyOyBqKyssIGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoY2FudmFzKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLCBpICogc2VsZi5waWVjZVdpZHRoLCBqICogc2VsZi5waWVjZUhlaWdodCwgc2VsZi5waWVjZVdpZHRoLCBzZWxmLnBpZWNlSGVpZ2h0LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmUpIC8vIGNoZWNrcyBpZiB0ZXh0dXJlIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGV4dHVyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNlbGYucGxhbmVXaWR0aCwgc2VsZi5wbGFuZUhlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5yYW5kb20oKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5kb20gPCBzZWxmLmZyZWVQaWVjZU51bWJlciAvIChzZWxmLmNvbHVtbk51bWJlciAqIHNlbGYuY29sdW1uTnVtYmVyIC0gaW5kZXgpICYmIHNlbGYuZnJlZVBpZWNlTnVtYmVyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IC1zZWxmLmJveFNpemUgLyAyICsgc2VsZi5wbGFuZVdpZHRoIC8gMiArIE1hdGgucmFuZG9tKCkgKiAoc2VsZi5ib3hTaXplIC0gc2VsZi5wbGFuZVdpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeiA9IC1zZWxmLmJveFNpemUgLyAyICsgc2VsZi5wbGFuZUhlaWdodCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKHNlbGYuYm94U2l6ZSAtIHNlbGYucGxhbmVIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucm90YXRpb24ueCA9IE1hdGguUEkgLyAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KE1hdGgucm91bmQoeCksIDAuNSwgTWF0aC5yb3VuZCh6KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJsYW5rTWVzaCA9IG1lc2guY2xvbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvbGRNYXBbbWVzaC5pZF0gPSBibGFua01lc2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxhbmtNZXNoLnJvdGF0aW9uLnggPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogMHg4MDgwODAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5wb3NpdGlvbi5zZXQoaSpzZWxmLnBsYW5lV2lkdGggLSBzZWxmLnNjYWxlZFdpZHRoIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIsIDUgKyBzZWxmLnNjYWxlZEhlaWdodCAtIHNlbGYucGxhbmVIZWlnaHQgLyAyIC0gaiAqIHNlbGYucGxhbmVIZWlnaHQsIC05Ljk5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNjZW5lLmFkZChibGFua01lc2gpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnJlZVBpZWNlTnVtYmVyLS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mcmVlUGllY2VMaXN0LnB1c2gobWVzaC5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNoQ2FudmFzTWFwW21lc2guaWRdID0gY2FudmFzXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoaSAqIHNlbGYucGxhbmVXaWR0aCAtIHNlbGYuc2NhbGVkV2lkdGggLyAyICsgc2VsZi5wbGFuZVdpZHRoIC8gMiwgNSArIHNlbGYuc2NhbGVkSGVpZ2h0IC0gc2VsZi5wbGFuZUhlaWdodCAvIDIgLSBqICogc2VsZi5wbGFuZUhlaWdodCwgLTkuOTkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lc2gucG9zaXRpb24uc2V0KDAsIDIsLTkpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tZXNoTGlzdC5wdXNoKG1lc2gpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQobWVzaClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codHlwZW9mIHRoaXMuc2NlbmUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3dlZXRhbGVydCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcIuaPkOekulwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIuaKiuWxj+W5leS4reWkrueahOWwj+aJi+WvueWHhuWcsOS4iueahOWbvueJh++8jOeCueWHu+aMiemSruaNoei1t++8jOWGjeaKiuWbvueJh+WvueWHhuWOn+WbvuS9jee9ru+8jOeCueWHu+i0tOS4ilwiLFxyXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCLnn6XpgZPkuoZcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZW5kZXIodGltZXN0YW1wKSB7XHJcbiAgICAgICAgLy8gdmFyIGRlbHRhID0gTWF0aC5taW4odGltZXN0YW1wIC0gdGhpcy5sYXN0UmVuZGVyLCA1MDApXHJcbiAgICAgICAgdGhpcy5sYXN0UmVuZGVyID0gdGltZXN0YW1wXHJcbiAgICAgICAgICAgIC8v5aSE55CG6byg5qCH54K55Ye7XHJcbiAgICAgICAgdGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLm1vdXNlLCB0aGlzLmNhbWVyYSlcclxuICAgICAgICBsZXQgaW50ZXJzZWN0cyA9IHRoaXMucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHModGhpcy5zY2VuZS5jaGlsZHJlbilcclxuICAgICAgICB0aGlzLm1vdXNlLnggPSB0aGlzLm1vdXNlLnkgPSB1bmRlZmluZWRcclxuICAgICAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGludGVyc2VjdHMpXHJcbiAgICAgICAgICAgIGxldCBjbGlja0ZsYWcgPSBmYWxzZVxyXG4gICAgICAgICAgICBmb3IgKGxldCBtZXNoIG9mIHRoaXMubWVzaExpc3QpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mcmVlUGllY2VMaXN0LmluZGV4T2YobWVzaC5pZCkgPiAtMSAmJiBtZXNoLmlkID09IGludGVyc2VjdHNbMF0ub2JqZWN0LmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWVzaC5tYXRlcmlhbC5jb2xvci5zZXQoMHhmZjAwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZE1lc2ghPT1udWxsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNhbnZhcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbWVzaFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2UucGlja0J0bi5pbm5lckhUTUwgPSBcIui0tOS4ilwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tGbGFnID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZXNoLnZpc2libGUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGluXCIpLmFwcGVuZENoaWxkKHRoaXMubWVzaENhbnZhc01hcFttZXNoLmlkXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkTWVzaCAmJiB0aGlzLmhvbGRNYXBbdGhpcy5zZWxlY3RlZE1lc2guaWRdLmlkID09IGludGVyc2VjdHNbMF0ub2JqZWN0LmlkKXtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gaW50ZXJzZWN0c1swXS5vYmplY3QucG9zaXRpb25cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnBvc2l0aW9uLnNldCh0LngsdC55LHQueilcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnJvdGF0aW9uLnNldCgwLDAsMClcclxuICAgICAgICAgICAgICAgIHRoaXMuaG9sZE1hcFt0aGlzLnNlbGVjdGVkTWVzaC5pZF0ucG9zaXRpb24ueiAtPSAxXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC52aXNpYmxlID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi5o2h6LW3XCJcclxuICAgICAgICAgICAgICAgIC8v5Zyo5pyq5ou85oiQ5Zu+54mH5YiX6KGo5Lit5Y+W5Ye65b2T5YmN6aG5XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyZWVQaWVjZUxpc3Quc3BsaWNlKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKHRoaXMuc2VsZWN0ZWRNZXNoLmlkKSwxKVxyXG4gICAgICAgICAgICAgICAgLy/muIXmpZrlvZPliY3pgInlj5bnmoTlm77lg49cclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZE1lc2ggJiYgIWNsaWNrRmxhZyl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlLnBpY2tCdG4uaW5uZXJIVE1MID0gXCLmjaHotbdcIlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWVcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKClcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLHRoaXMuY2FtZXJhKVxyXG5cclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXIpXHJcbiAgICB9XHJcbiAgICBvblJlc2l6ZShlKSB7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblx0XHR0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblx0XHR0aGlzLnJlbmRlcmVyLnNldFNpemUoIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQgKTtcclxuICAgIH1cclxuICAgIGNsZWFyQ2FudmFzKCl7XHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKVxyXG4gICAgICAgIGxldCBwaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKVxyXG4gICAgICAgIHdoaWxlKGNhbnZhcyl7XHJcbiAgICAgICAgICAgIHBpbi5yZW1vdmVDaGlsZChjYW52YXMpXHJcbiAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qYXZhc2NyaXB0cy9nYW1lLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW91c2UgZXh0ZW5kcyBUSFJFRS5WZWN0b3Iye1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG4gICAgICAgIHRoaXMueCA9IHVuZGVmaW5lZFxyXG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImNsaWNrXCIsIHRoaXMub25Nb3VzZUNsaWNrLmJpbmQodGhpcyksIGZhbHNlIClcclxuICAgICAgICB0aGlzLnBpY2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpY2stYnRuXCIpXHJcbiAgICAgICAgdGhpcy5waWNrSGFuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGljay1oYW5kXCIpXHJcbiAgICAgICAgdGhpcy5waWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuYnRuT25DbGljay5iaW5kKHRoaXMpLGZhbHNlKVxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpLGZhbHNlKVxyXG4gICAgfVxyXG4gICAgb25Nb3VzZUNsaWNrKCBldmVudCApIHtcclxuICAgIFx0Ly8gY2FsY3VsYXRlIG1vdXNlIHBvc2l0aW9uIGluIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzXHJcbiAgICBcdC8vICgtMSB0byArMSkgZm9yIGJvdGggY29tcG9uZW50c1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmNsaWVudFgsZXZlbnQuY2xpZW50WSlcclxuICAgICAgICB0aGlzLnggPSAoIGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDFcclxuICAgICAgICB0aGlzLnkgPSAtICggZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDFcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLngsdGhpcy55KVxyXG4gICAgfVxyXG4gICAgYnRuT25DbGljayggZXZlbnQgKSB7XHJcbiAgICAgICAgdGhpcy54ID0gKCAwLjQ2ICkgKiAyIC0gMVxyXG4gICAgICAgIHRoaXMueSA9IC0gKCAwLjM4ICkgKiAyICsgMVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMueCx0aGlzLnkpXHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvamF2YXNjcmlwdHMvbW91c2UuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcHV6emxlcy9jYXJ0b29uICg1KS5qcGdcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vcHVibGljL2ltYWdlcy9wdXp6bGVzL2NhcnRvb24gKDUpLmpwZ1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gc3dlZXRhbGVydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwic3dlZXRhbGVydFwiXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==