!function(e){function t(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var i={};return t.m=e,t.c=i,t.p="/VRPuzzle/public/",t(0)}([function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}i(5);var s=i(1),r=n(s),o=new r["default"],a=function(){o.render()};a()},function(e,t,i){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=i(2),a=n(o),h=i(4),c=n(h),l=function(){function e(){s(this,e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.set(0,10,0),this.controls=new THREE.DeviceOrientationControls(this.camera),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top=0,document.body.appendChild(this.renderer.domElement),this.raycaster=new THREE.Raycaster,this.mouse=new a["default"],this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.placePieces=this.placePieces.bind(this),this.meshList=[],this.logFlag=!0,this.boxSize=50,this.onTextureLoaded(),window.addEventListener("resize",this.onResize,!0),this.lastRender=0,this.display=null}return r(e,[{key:"onTextureLoaded",value:function(){var e=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),t=new THREE.MeshBasicMaterial({alphaMap:0});this.skybox=new THREE.Mesh(e,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox),this.placePieces(),this.placeSphere()}},{key:"placeSphere",value:function(){var e=new THREE.SphereGeometry(100,100,100);e.scale(-1,1,1);var t=new THREE.TextureLoader,i=this;t.load("public/images/sphere (2).jpg",function(t){var n=new THREE.MeshBasicMaterial({map:t}),s=new THREE.Mesh(e,n);s.position.set(0,0,10),i.scene.add(s)})}},{key:"placePieces",value:function(){this.columnNumber=4,this.pieceNumber=this.columnNumber*this.columnNumber,this.scaledWidth=16,this.scaledHeight=9,this.freePieceNumber=1*this.pieceNumber/2,this.freePieceList=[],this.planeWidth=this.scaledWidth/this.columnNumber,this.planeHeight=this.scaledHeight/this.columnNumber,this.selectedMesh=null,this.holdMap={},this.meshCanvasMap={};var e=new Image;e.src=i(3);var t=document.createElement("canvas"),n=t.getContext("2d"),s=this;e.onload=function(){s.pieceWidth=e.width/s.columnNumber,s.pieceHeight=e.height/s.columnNumber;for(var i,r,o,a=0,h=0;a<s.columnNumber;a++)for(var c=0;c<s.columnNumber;c++,h++){t=document.createElement("canvas"),n=t.getContext("2d"),i=new THREE.Texture(t),n.drawImage(e,a*s.pieceWidth,c*s.pieceHeight,s.pieceWidth,s.pieceHeight,0,0,t.width,t.height),i&&(i.needsUpdate=!0),r=new THREE.MeshBasicMaterial({map:i,side:THREE.DoubleSide}),r.transparent=!1,o=new THREE.Mesh(new THREE.PlaneGeometry(s.planeWidth,s.planeHeight),r);var l=Math.random();if(l<s.freePieceNumber/(s.columnNumber*s.columnNumber-h)&&s.freePieceNumber>0){var d=-s.boxSize/2+s.planeWidth/2+Math.random()*(s.boxSize-s.planeWidth),u=-s.boxSize/2+s.planeHeight/2+Math.random()*(s.boxSize-s.planeHeight);o.rotation.x=Math.PI/2,o.position.set(Math.round(d),.5,Math.round(u));var p=o.clone();s.holdMap[o.id]=p,p.rotation.x=0,p.material=new THREE.MeshBasicMaterial({color:8421504,side:THREE.DoubleSide}),p.position.set(a*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-c*s.planeHeight,-9.99),s.scene.add(p),s.freePieceNumber--,s.freePieceList.push(o.id),s.meshCanvasMap[o.id]=t}else o.position.set(a*s.planeWidth-s.scaledWidth/2+s.planeWidth/2,5+s.scaledHeight-s.planeHeight/2-c*s.planeHeight,-9.99);s.meshList.push(o),s.scene.add(o)}}}},{key:"render",value:function(e){this.lastRender=e,this.raycaster.setFromCamera(this.mouse,this.camera);var t=this.raycaster.intersectObjects(this.scene.children);if(this.mouse.x=this.mouse.y=void 0,t.length>0){var i=!1,n=!0,s=!1,r=void 0;try{for(var o,a=this.meshList[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){var h=o.value;this.freePieceList.indexOf(h.id)>-1&&h.id==t[0].object.id&&(null!==this.selectedMesh&&(this.clearCanvas(),this.selectedMesh.visible=!0),this.selectedMesh=h,this.mouse.pickBtn.innerHTML="贴上",i=!0,h.visible=!1,document.getElementById("pin").appendChild(this.meshCanvasMap[h.id]))}}catch(l){s=!0,r=l}finally{try{!n&&a["return"]&&a["return"]()}finally{if(s)throw r}}if(this.selectedMesh&&this.holdMap[this.selectedMesh.id].id==t[0].object.id){var d=t[0].object.position;this.selectedMesh.position.set(d.x,d.y,d.z),this.selectedMesh.rotation.set(0,0,0),this.holdMap[this.selectedMesh.id].position.z-=1,this.selectedMesh.visible=!0,this.mouse.pickBtn.innerHTML="捡起",this.freePieceList.splice(this.freePieceList.indexOf(this.selectedMesh.id),1),this.clearCanvas(),this.selectedMesh=null,0==this.freePieceList.length&&(0,c["default"])({title:"恭喜！",text:"成功拼完了一张图，可是我也不会给你流量",confirmButtonText:"好的"})}this.selectedMesh&&!i&&(this.mouse.pickBtn.innerHTML="捡起",this.selectedMesh.visible=!0,this.clearCanvas(),this.selectedMesh=null)}this.controls.update(),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}},{key:"clearCanvas",value:function(){for(var e=document.querySelector("#pin canvas"),t=document.getElementById("pin");null!=e;)t.removeChild(e),e=document.querySelector("#pin canvas")}}]),e}();t["default"]=l},function(e,t){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),o=function(e){function t(e){i(this,t);var s=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return s.x=void 0,s.y=void 0,s.pickBtn=document.getElementById("pick-btn"),s.pickHand=document.getElementById("pick-hand"),s.pickBtn.addEventListener("click",s.btnOnClick.bind(s),!1),s}return s(t,e),r(t,[{key:"onMouseClick",value:function(e){this.x=e.clientX/window.innerWidth*2-1,this.y=2*-(e.clientY/window.innerHeight)+1}},{key:"btnOnClick",value:function(e){this.x=.92-1,this.y=-.79+1}}]),t}(THREE.Vector2);t["default"]=o},function(e,t,i){e.exports=i.p+"images/puzzles/cartoon (3).jpg"},function(e,t){e.exports=swal},function(e,t){e.exports=!0}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vVlJQdXp6bGUuYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA5NDEwNWFlZmM5ZDVlNjMwY2IzMiIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHRzL21vdXNlLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9pbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGciLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3dhbFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInRydWVcIiJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2FtZSIsIl9nYW1lMiIsImdhbWUiLCJsb29wIiwicmVuZGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9tb3VzZSIsIl9tb3VzZTIiLCJfc3dlZXRhbGVydCIsIl9zd2VldGFsZXJ0MiIsIkdhbWUiLCJ0aGlzIiwic2NlbmUiLCJUSFJFRSIsIlNjZW5lIiwiY2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJwb3NpdGlvbiIsInNldCIsImNvbnRyb2xzIiwiRGV2aWNlT3JpZW50YXRpb25Db250cm9scyIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsImRvbUVsZW1lbnQiLCJzdHlsZSIsInRvcCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwicmF5Y2FzdGVyIiwiUmF5Y2FzdGVyIiwibW91c2UiLCJvblRleHR1cmVMb2FkZWQiLCJiaW5kIiwib25SZXNpemUiLCJwbGFjZVBpZWNlcyIsIm1lc2hMaXN0IiwibG9nRmxhZyIsImJveFNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwibGFzdFJlbmRlciIsImRpc3BsYXkiLCJnZW9tZXRyeSIsIkJveEdlb21ldHJ5IiwibWF0ZXJpYWwiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImFscGhhTWFwIiwic2t5Ym94IiwiTWVzaCIsInkiLCJhZGQiLCJwbGFjZVNwaGVyZSIsIlNwaGVyZUdlb21ldHJ5Iiwic2NhbGUiLCJsb2FkZXIiLCJUZXh0dXJlTG9hZGVyIiwic2VsZiIsImxvYWQiLCJ0ZXh0dXJlIiwibWFwIiwibWVzaCIsImNvbHVtbk51bWJlciIsInBpZWNlTnVtYmVyIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJmcmVlUGllY2VOdW1iZXIiLCJmcmVlUGllY2VMaXN0IiwicGxhbmVXaWR0aCIsInBsYW5lSGVpZ2h0Iiwic2VsZWN0ZWRNZXNoIiwiaG9sZE1hcCIsIm1lc2hDYW52YXNNYXAiLCJpbWFnZU9iaiIsIkltYWdlIiwic3JjIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwib25sb2FkIiwicGllY2VXaWR0aCIsIndpZHRoIiwicGllY2VIZWlnaHQiLCJoZWlnaHQiLCJpbmRleCIsImoiLCJUZXh0dXJlIiwiZHJhd0ltYWdlIiwibmVlZHNVcGRhdGUiLCJzaWRlIiwiRG91YmxlU2lkZSIsInRyYW5zcGFyZW50IiwiUGxhbmVHZW9tZXRyeSIsInJhbmRvbSIsIk1hdGgiLCJ4IiwieiIsInJvdGF0aW9uIiwiUEkiLCJyb3VuZCIsImJsYW5rTWVzaCIsImNsb25lIiwiY29sb3IiLCJwdXNoIiwidGltZXN0YW1wIiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwiY2hpbGRyZW4iLCJ1bmRlZmluZWQiLCJjbGlja0ZsYWciLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImluZGV4T2YiLCJvYmplY3QiLCJjbGVhckNhbnZhcyIsInZpc2libGUiLCJwaWNrQnRuIiwiaW5uZXJIVE1MIiwiZ2V0RWxlbWVudEJ5SWQiLCJlcnIiLCJ0Iiwic3BsaWNlIiwidGl0bGUiLCJ0ZXh0IiwiY29uZmlybUJ1dHRvblRleHQiLCJ1cGRhdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInF1ZXJ5U2VsZWN0b3IiLCJwaW4iLCJyZW1vdmVDaGlsZCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTW91c2UiLCJfVEhSRUUkVmVjdG9yIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInBpY2tIYW5kIiwiYnRuT25DbGljayIsImV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJWZWN0b3IyIiwic3dhbCJdLCJtYXBwaW5ncyI6IkNB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QXZLLE9BQUEySyxlQUFBSCxJQUFBekwsS0FBQXVDLEtBQ1JoQixHQURRLE9BRWRvSyxHQUFLekQsRUFBSWMsT0FDVDJDLEVBQUt2RyxFQUFJNEQsT0FFVDJDLEVBQUs1QixRQUFVbEcsU0FBU29HLGVBQWUsWUFDdkMwQixFQUFLRSxTQUFXaEksU0FBU29HLGVBQWUsYUFDeEMwQixFQUFLNUIsUUFBUXJGLGlCQUFpQixRQUFRaUgsRUFBS0csV0FBVzFILEtBQWhCdUgsT0FQeEJBLEVKNllqQixNQS9CQVQsR0FBVU8sRUFBT0MsR0FpQmpCdEssRUFBYXFLLElBQ1QzSixJQUFLLGVBQ0xYLE1BQU8sU0l2WEU0SyxHQUNWeEosS0FBSzJGLEVBQU02RCxFQUFNQyxRQUFVbkosT0FBT0MsV0FBZSxFQUFJLEVBQ3JEUCxLQUFLNkMsRUFBK0MsSUFBdkMyRyxFQUFNRSxRQUFVcEosT0FBT0UsYUFBb0IsS0owWHZEakIsSUFBSyxhQUNMWCxNQUFPLFNJelhBNEssR0FDUnhKLEtBQUsyRixFQUFNLElBQWEsRUFDeEIzRixLQUFLNkMsT0FBc0IsTUo2WHZCcUcsR0k5WXVCaEosTUFBTXlKLFFKaVp4Q3RNLGNJalpvQjZMLEdKcVpmLFNBQVM1TCxFQUFRRCxFQUFTSCxHS3JaaENJLEVBQUFELFFBQUFILEVBQUFVLEVBQUEsa0NMMlpNLFNBQVNOLEVBQVFELEdNM1p2QkMsRUFBQUQsUUFBQXVNLE1OaWFNLFNBQVN0TSxFQUFRRCxHT2phdkJDLEVBQUFEIiwiZmlsZSI6IlZSUHV6emxlLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9WUlB1enpsZS9wdWJsaWMvXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX2dhbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9nYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dhbWUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBnYW1lID0gbmV3IF9nYW1lMi5kZWZhdWx0KCk7XG5cdFxuXHR2YXIgbG9vcCA9IGZ1bmN0aW9uIGxvb3AoKSB7XG5cdCAgICBnYW1lLnJlbmRlcigpO1xuXHR9O1xuXHRsb29wKCk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9tb3VzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX21vdXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vdXNlKTtcblx0XG5cdHZhciBfc3dlZXRhbGVydCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX3N3ZWV0YWxlcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3dlZXRhbGVydCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBHYW1lID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gR2FtZSgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2FtZSk7XG5cdFxuXHQgICAgICAgIC8vIENyZWF0ZSBhIHRocmVlLmpzIHNjZW5lLlxuXHQgICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblx0XG5cdCAgICAgICAgLy8gQ3JlYXRlIGEgdGhyZWUuanMgY2FtZXJhLlxuXHQgICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwMCk7XG5cdFxuXHQgICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAxMCwgMCk7XG5cdCAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBUSFJFRS5EZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzKHRoaXMuY2FtZXJhKTtcblx0XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcblx0ICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cdCAgICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0ICAgICAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gMDtcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cdFxuXHQgICAgICAgIC8vIHJheWNhc3RlclxuXHQgICAgICAgIHRoaXMucmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xuXHQgICAgICAgIHRoaXMubW91c2UgPSBuZXcgX21vdXNlMi5kZWZhdWx0KCk7XG5cdCAgICAgICAgLy9iaW5kIHRoaXNcblx0ICAgICAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZCA9IHRoaXMub25UZXh0dXJlTG9hZGVkLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKTtcblx0ICAgICAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcyk7XG5cdCAgICAgICAgdGhpcy5wbGFjZVBpZWNlcyA9IHRoaXMucGxhY2VQaWVjZXMuYmluZCh0aGlzKTtcblx0ICAgICAgICAvL1xuXHQgICAgICAgIHRoaXMubWVzaExpc3QgPSBbXTtcblx0ICAgICAgICB0aGlzLmxvZ0ZsYWcgPSB0cnVlO1xuXHQgICAgICAgIC8vIEFkZCBhIHJlcGVhdGluZyBncmlkIGFzIGEgc2t5Ym94LlxuXHQgICAgICAgIHRoaXMuYm94U2l6ZSA9IDUwO1xuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxuXHQgICAgICAgIC8vIHRoaXMubG9hZGVyLmxvYWQoXCJwdWJsaWMvaW1hZ2VzL2JveC5wbmdcIiwgdGhpcy5vblRleHR1cmVMb2FkZWQpXG5cdCAgICAgICAgLy8gbGV0IHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZSgpXG5cdCAgICAgICAgdGhpcy5vblRleHR1cmVMb2FkZWQoKTtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB0cnVlKTtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInZyZGlzcGxheXByZXNlbnRjaGFuZ2VcIiwgdGhpcy5vblJlc2l6ZSwgdHJ1ZSlcblx0ICAgICAgICB0aGlzLmxhc3RSZW5kZXIgPSAwO1xuXHQgICAgICAgIHRoaXMuZGlzcGxheSA9IG51bGw7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEdhbWUsIFt7XG5cdCAgICAgICAga2V5OiBcIm9uVGV4dHVyZUxvYWRlZFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRleHR1cmVMb2FkZWQoKSB7XG5cdCAgICAgICAgICAgIC8vIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZ1xuXHQgICAgICAgICAgICAvLyB0ZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcblx0ICAgICAgICAgICAgLy8gdGV4dHVyZS5yZXBlYXQuc2V0KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplKVxuXHRcblx0ICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUpO1xuXHQgICAgICAgICAgICAvLyBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjAwZmYsIHNpZGU6IFRIUkVFLkJhY2tTaWRlICwgd2lyZWZyYW1lOiB0cnVlfSApXG5cdCAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGFscGhhTWFwOiAweDAwMDAwIH0pO1xuXHQgICAgICAgICAgICAvL1xuXHQgICAgICAgICAgICAvLyBBbGlnbiB0aGUgc2t5Ym94IHRvIHRoZSBmbG9vciAod2hpY2ggaXMgYXQgeT0wKS5cblx0ICAgICAgICAgICAgdGhpcy5za3lib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuXHQgICAgICAgICAgICB0aGlzLnNreWJveC5wb3NpdGlvbi55ID0gdGhpcy5ib3hTaXplIC8gMjtcblx0ICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5za3lib3gpO1xuXHQgICAgICAgICAgICB0aGlzLnBsYWNlUGllY2VzKCk7XG5cdCAgICAgICAgICAgIHRoaXMucGxhY2VTcGhlcmUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInBsYWNlU3BoZXJlXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlU3BoZXJlKCkge1xuXHQgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMTAwLCAxMDAsIDEwMCk7XG5cdCAgICAgICAgICAgIGdlb21ldHJ5LnNjYWxlKC0xLCAxLCAxKTtcblx0ICAgICAgICAgICAgLy8gZ2VvbWV0cnkuc2NhbGUoIC0gMSwgMSwgMSApO1xuXHQgICAgICAgICAgICAvLyB2YXIgc3BoZXJlID0gcmVxdWlyZShcIi4uLy4uL3B1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIilcblx0ICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgICAgICAgbG9hZGVyLmxvYWQoXCJwdWJsaWMvaW1hZ2VzL3NwaGVyZSAoMikuanBnXCIsIGZ1bmN0aW9uICh0ZXh0dXJlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuXHQgICAgICAgICAgICAgICAgICAgIG1hcDogdGV4dHVyZVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgdmFyIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuXHQgICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoMCwgMCwgMTApO1xuXHQgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQobWVzaCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwicGxhY2VQaWVjZXNcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGxhY2VQaWVjZXMoKSB7XG5cdFxuXHQgICAgICAgICAgICB0aGlzLmNvbHVtbk51bWJlciA9IDQ7XG5cdCAgICAgICAgICAgIHRoaXMucGllY2VOdW1iZXIgPSB0aGlzLmNvbHVtbk51bWJlciAqIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnNjYWxlZFdpZHRoID0gMTY7XG5cdCAgICAgICAgICAgIHRoaXMuc2NhbGVkSGVpZ2h0ID0gOTtcblx0ICAgICAgICAgICAgdGhpcy5mcmVlUGllY2VOdW1iZXIgPSB0aGlzLnBpZWNlTnVtYmVyICogMSAvIDI7XG5cdCAgICAgICAgICAgIHRoaXMuZnJlZVBpZWNlTGlzdCA9IFtdO1xuXHQgICAgICAgICAgICB0aGlzLnBsYW5lV2lkdGggPSB0aGlzLnNjYWxlZFdpZHRoIC8gdGhpcy5jb2x1bW5OdW1iZXI7XG5cdCAgICAgICAgICAgIHRoaXMucGxhbmVIZWlnaHQgPSB0aGlzLnNjYWxlZEhlaWdodCAvIHRoaXMuY29sdW1uTnVtYmVyO1xuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7IC8vdGhlIGxhc3QgY2xpY2tlZCBtZXNoSWRcblx0ICAgICAgICAgICAgdGhpcy5ob2xkTWFwID0ge307XG5cdCAgICAgICAgICAgIHRoaXMubWVzaENhbnZhc01hcCA9IHt9O1xuXHQgICAgICAgICAgICB2YXIgaW1hZ2VPYmogPSBuZXcgSW1hZ2UoKTtcblx0ICAgICAgICAgICAgaW1hZ2VPYmouc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0ICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5cdCAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0ICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICAgICAgICBpbWFnZU9iai5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBsZXQgd3MgPSAoY2FudmFzLndpZHRoICkgLyBpbWFnZU9iai53aWR0aFxuXHQgICAgICAgICAgICAgICAgLy8gbGV0IGhzID0gKGNhbnZhcy5oZWlnaHQpIC8gaW1hZ2VPYmouaGVpZ2h0XG5cdCAgICAgICAgICAgICAgICAvLyBzZWxmLnNjYWxlID0gTWF0aC5taW4od3MsIGhzKVxuXHQgICAgICAgICAgICAgICAgc2VsZi5waWVjZVdpZHRoID0gaW1hZ2VPYmoud2lkdGggLyBzZWxmLmNvbHVtbk51bWJlcjtcblx0ICAgICAgICAgICAgICAgIHNlbGYucGllY2VIZWlnaHQgPSBpbWFnZU9iai5oZWlnaHQgLyBzZWxmLmNvbHVtbk51bWJlcjtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbmRleCA9IDAsIHRleHR1cmUsIG1hdGVyaWFsLCBtZXNoOyBpIDwgc2VsZi5jb2x1bW5OdW1iZXI7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VsZi5jb2x1bW5OdW1iZXI7IGorKywgaW5kZXgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKGNhbnZhcyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLCBpICogc2VsZi5waWVjZVdpZHRoLCBqICogc2VsZi5waWVjZUhlaWdodCwgc2VsZi5waWVjZVdpZHRoLCBzZWxmLnBpZWNlSGVpZ2h0LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZSkgLy8gY2hlY2tzIGlmIHRleHR1cmUgZXhpc3RzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGV4dHVyZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gZmFsc2U7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2gobmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2VsZi5wbGFuZVdpZHRoLCBzZWxmLnBsYW5lSGVpZ2h0KSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDUwLDUwLDUwLDAsTWF0aC5QSS8xNixNYXRoLlBJLzIsTWF0aC5QSS8yNCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tIDwgc2VsZi5mcmVlUGllY2VOdW1iZXIgLyAoc2VsZi5jb2x1bW5OdW1iZXIgKiBzZWxmLmNvbHVtbk51bWJlciAtIGluZGV4KSAmJiBzZWxmLmZyZWVQaWVjZU51bWJlciA+IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gLXNlbGYuYm94U2l6ZSAvIDIgKyBzZWxmLnBsYW5lV2lkdGggLyAyICsgTWF0aC5yYW5kb20oKSAqIChzZWxmLmJveFNpemUgLSBzZWxmLnBsYW5lV2lkdGgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHogPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVIZWlnaHQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChzZWxmLmJveFNpemUgLSBzZWxmLnBsYW5lSGVpZ2h0KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucm90YXRpb24ueCA9IE1hdGguUEkgLyAyO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoTWF0aC5yb3VuZCh4KSwgMC41LCBNYXRoLnJvdW5kKHopKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibGFua01lc2ggPSBtZXNoLmNsb25lKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvbGRNYXBbbWVzaC5pZF0gPSBibGFua01lc2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gucm90YXRpb24ueCA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAweDgwODA4MCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5wb3NpdGlvbi5zZXQoaSAqIHNlbGYucGxhbmVXaWR0aCAtIHNlbGYuc2NhbGVkV2lkdGggLyAyICsgc2VsZi5wbGFuZVdpZHRoIC8gMiwgNSArIHNlbGYuc2NhbGVkSGVpZ2h0IC0gc2VsZi5wbGFuZUhlaWdodCAvIDIgLSBqICogc2VsZi5wbGFuZUhlaWdodCwgLTkuOTkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQoYmxhbmtNZXNoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnJlZVBpZWNlTnVtYmVyLS07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZyZWVQaWVjZUxpc3QucHVzaChtZXNoLmlkKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaENhbnZhc01hcFttZXNoLmlkXSA9IGNhbnZhcztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KGkgKiBzZWxmLnBsYW5lV2lkdGggLSBzZWxmLnNjYWxlZFdpZHRoIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIsIDUgKyBzZWxmLnNjYWxlZEhlaWdodCAtIHNlbGYucGxhbmVIZWlnaHQgLyAyIC0gaiAqIHNlbGYucGxhbmVIZWlnaHQsIC05Ljk5KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBtZXNoLnBvc2l0aW9uLnNldCgwLCAyLC05KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1lc2hMaXN0LnB1c2gobWVzaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2NlbmUuYWRkKG1lc2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0eXBlb2YgdGhpcy5zY2VuZSlcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHRpbWVzdGFtcCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgZGVsdGEgPSBNYXRoLm1pbih0aW1lc3RhbXAgLSB0aGlzLmxhc3RSZW5kZXIsIDUwMClcblx0ICAgICAgICAgICAgdGhpcy5sYXN0UmVuZGVyID0gdGltZXN0YW1wO1xuXHQgICAgICAgICAgICAvL+WkhOeQhum8oOagh+eCueWHu1xuXHQgICAgICAgICAgICB0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMubW91c2UsIHRoaXMuY2FtZXJhKTtcblx0ICAgICAgICAgICAgdmFyIGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMuc2NlbmUuY2hpbGRyZW4pO1xuXHQgICAgICAgICAgICB0aGlzLm1vdXNlLnggPSB0aGlzLm1vdXNlLnkgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGludGVyc2VjdHMpXG5cdCAgICAgICAgICAgICAgICB2YXIgY2xpY2tGbGFnID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMubWVzaExpc3RbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNoID0gX3N0ZXAudmFsdWU7XG5cdFxuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKG1lc2guaWQpID4gLTEgJiYgbWVzaC5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRNZXNoICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNhbnZhcygpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBtZXNoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi6LS05LiKXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja0ZsYWcgPSB0cnVlO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gudmlzaWJsZSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaW5cIikuYXBwZW5kQ2hpbGQodGhpcy5tZXNoQ2FudmFzTWFwW21lc2guaWRdKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRNZXNoICYmIHRoaXMuaG9sZE1hcFt0aGlzLnNlbGVjdGVkTWVzaC5pZF0uaWQgPT0gaW50ZXJzZWN0c1swXS5vYmplY3QuaWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGludGVyc2VjdHNbMF0ub2JqZWN0LnBvc2l0aW9uO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnBvc2l0aW9uLnNldCh0LngsIHQueSwgdC56KTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5ob2xkTWFwW3RoaXMuc2VsZWN0ZWRNZXNoLmlkXS5wb3NpdGlvbi56IC09IDE7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi5o2h6LW3XCI7XG5cdCAgICAgICAgICAgICAgICAgICAgLy/lnKjmnKrmi7zmiJDlm77niYfliJfooajkuK3lj5blh7rlvZPliY3poblcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmZyZWVQaWVjZUxpc3Quc3BsaWNlKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKHRoaXMuc2VsZWN0ZWRNZXNoLmlkKSwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgLy/muIXmpZrlvZPliY3pgInlj5bnmoTlm77lg49cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2ggPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyZWVQaWVjZUxpc3QubGVuZ3RoID09IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9zd2VldGFsZXJ0Mi5kZWZhdWx0KSh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLmga3llpzvvIFcIixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwi5oiQ5Yqf5ou85a6M5LqG5LiA5byg5Zu+77yM5Y+v5piv5oiR5Lmf5LiN5Lya57uZ5L2g5rWB6YePXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCLlpb3nmoRcIlxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE1lc2ggJiYgIWNsaWNrRmxhZykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2UucGlja0J0bi5pbm5lckhUTUwgPSBcIuaNoei1t1wiO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKCk7XG5cdCAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcblx0ICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIm9uUmVzaXplXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzaXplKGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cdCAgICAgICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0ICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiY2xlYXJDYW52YXNcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJDYW52YXMoKSB7XG5cdCAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpbiBjYW52YXNcIik7XG5cdCAgICAgICAgICAgIHZhciBwaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKTtcblx0ICAgICAgICAgICAgd2hpbGUgKGNhbnZhcyAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBwaW4ucmVtb3ZlQ2hpbGQoY2FudmFzKTtcblx0ICAgICAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gR2FtZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gR2FtZTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBNb3VzZSA9IGZ1bmN0aW9uIChfVEhSRUUkVmVjdG9yKSB7XG5cdCAgICBfaW5oZXJpdHMoTW91c2UsIF9USFJFRSRWZWN0b3IpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE1vdXNlKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vdXNlKTtcblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1vdXNlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTW91c2UpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdFxuXHQgICAgICAgIF90aGlzLnggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgX3RoaXMueSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCB0aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpLCBmYWxzZSApXG5cdCAgICAgICAgX3RoaXMucGlja0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGljay1idG5cIik7XG5cdCAgICAgICAgX3RoaXMucGlja0hhbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpY2staGFuZFwiKTtcblx0ICAgICAgICBfdGhpcy5waWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfdGhpcy5idG5PbkNsaWNrLmJpbmQoX3RoaXMpLCBmYWxzZSk7XG5cdCAgICAgICAgLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMub25Nb3VzZUNsaWNrLmJpbmQodGhpcyksZmFsc2UpXG5cdCAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhNb3VzZSwgW3tcblx0ICAgICAgICBrZXk6IFwib25Nb3VzZUNsaWNrXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uTW91c2VDbGljayhldmVudCkge1xuXHQgICAgICAgICAgICB0aGlzLnggPSBldmVudC5jbGllbnRYIC8gd2luZG93LmlubmVyV2lkdGggKiAyIC0gMTtcblx0ICAgICAgICAgICAgdGhpcy55ID0gLShldmVudC5jbGllbnRZIC8gd2luZG93LmlubmVySGVpZ2h0KSAqIDIgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiYnRuT25DbGlja1wiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidG5PbkNsaWNrKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMueCA9IDAuNDYgKiAyIC0gMTtcblx0ICAgICAgICAgICAgdGhpcy55ID0gLTAuMzk1ICogMiArIDE7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBNb3VzZTtcblx0fShUSFJFRS5WZWN0b3IyKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE1vdXNlO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcImltYWdlcy9wdXp6bGVzL2NhcnRvb24gKDMpLmpwZ1wiO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBzd2FsO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBWUlB1enpsZS5idW5kbGUuanNcbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvVlJQdXp6bGUvcHVibGljL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgOTQxMDVhZWZjOWQ1ZTYzMGNiMzJcbiAqKi8iLCJpbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vZ2FtZS5qc1wiXHJcbmxldCBnYW1lID0gbmV3IEdhbWUoKVxyXG5cclxuY29uc3QgbG9vcCA9ICgpPT57XHJcbiAgICBnYW1lLnJlbmRlcigpXHJcbn1cclxubG9vcCgpXHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2phdmFzY3JpcHRzL2luZGV4LmpzXG4gKiovIiwiXHJcbmltcG9ydCBNb3VzZSBmcm9tIFwiLi9tb3VzZS5qc1wiXHJcbmltcG9ydCBzd2FsIGZyb20gXCJzd2VldGFsZXJ0XCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgdGhyZWUuanMgc2NlbmUuXHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBhIHRocmVlLmpzIGNhbWVyYS5cclxuICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg3NSwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMDApXHJcblxyXG4gICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgwLDEwLDApXHJcbiAgICAgICAgdGhpcy5jb250cm9scyA9IG5ldyBUSFJFRS5EZXZpY2VPcmllbnRhdGlvbkNvbnRyb2xzKCB0aGlzLmNhbWVyYSApO1xyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe1xyXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWVcclxuICAgICAgICB9KTtcclxuXHRcdHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggd2luZG93LmRldmljZVBpeGVsUmF0aW8gKTtcclxuXHRcdHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuXHRcdHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0XHR0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuc3R5bGUudG9wID0gMDtcclxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICAgICAgLy8gcmF5Y2FzdGVyXHJcbiAgICAgICAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKClcclxuICAgICAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlKClcclxuICAgICAgICAgICAgLy9iaW5kIHRoaXNcclxuICAgICAgICB0aGlzLm9uVGV4dHVyZUxvYWRlZCA9IHRoaXMub25UZXh0dXJlTG9hZGVkLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5wbGFjZVBpZWNlcyA9IHRoaXMucGxhY2VQaWVjZXMuYmluZCh0aGlzKVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMubWVzaExpc3QgPSBbXVxyXG4gICAgICAgIHRoaXMubG9nRmxhZyA9IHRydWVcclxuICAgICAgICAgICAgLy8gQWRkIGEgcmVwZWF0aW5nIGdyaWQgYXMgYSBza3lib3guXHJcbiAgICAgICAgdGhpcy5ib3hTaXplID0gNTBcclxuICAgICAgICAvLyB0aGlzLmxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKClcclxuICAgICAgICAvLyB0aGlzLmxvYWRlci5sb2FkKFwicHVibGljL2ltYWdlcy9ib3gucG5nXCIsIHRoaXMub25UZXh0dXJlTG9hZGVkKVxyXG4gICAgICAgIC8vIGxldCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKVxyXG4gICAgICAgIHRoaXMub25UZXh0dXJlTG9hZGVkKClcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCB0cnVlKVxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidnJkaXNwbGF5cHJlc2VudGNoYW5nZVwiLCB0aGlzLm9uUmVzaXplLCB0cnVlKVxyXG4gICAgICAgIHRoaXMubGFzdFJlbmRlciA9IDBcclxuICAgICAgICB0aGlzLmRpc3BsYXkgPSBudWxsXHJcbiAgICB9XHJcbiAgICBvblRleHR1cmVMb2FkZWQoKSB7XHJcbiAgICAgICAgLy8gdGV4dHVyZS53cmFwUyA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nXHJcbiAgICAgICAgLy8gdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nXHJcbiAgICAgICAgLy8gdGV4dHVyZS5yZXBlYXQuc2V0KHRoaXMuYm94U2l6ZSwgdGhpcy5ib3hTaXplKVxyXG5cclxuICAgICAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkodGhpcy5ib3hTaXplLCB0aGlzLmJveFNpemUsIHRoaXMuYm94U2l6ZSlcclxuICAgICAgICAvLyBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjAwZmYsIHNpZGU6IFRIUkVFLkJhY2tTaWRlICwgd2lyZWZyYW1lOiB0cnVlfSApXHJcbiAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgYWxwaGFNYXA6IDB4MDAwMDB9IClcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIEFsaWduIHRoZSBza3lib3ggdG8gdGhlIGZsb29yICh3aGljaCBpcyBhdCB5PTApLlxyXG4gICAgICAgIHRoaXMuc2t5Ym94ID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKVxyXG4gICAgICAgIHRoaXMuc2t5Ym94LnBvc2l0aW9uLnkgPSB0aGlzLmJveFNpemUgLyAyXHJcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5za3lib3gpXHJcbiAgICAgICAgdGhpcy5wbGFjZVBpZWNlcygpXHJcbiAgICAgICAgdGhpcy5wbGFjZVNwaGVyZSgpXHJcbiAgICB9XHJcbiAgICBwbGFjZVNwaGVyZSgpe1xyXG4gICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggMTAwLCAxMDAsIDEwMCApO1xyXG4gICAgICAgIGdlb21ldHJ5LnNjYWxlKC0xLDEsMSlcclxuXHRcdC8vIGdlb21ldHJ5LnNjYWxlKCAtIDEsIDEsIDEgKTtcclxuICAgICAgICAvLyB2YXIgc3BoZXJlID0gcmVxdWlyZShcIi4uLy4uL3B1YmxpYy9pbWFnZXMvc3BoZXJlICgyKS5qcGdcIilcclxuICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKVxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpc1xyXG4gICAgICAgIGxvYWRlci5sb2FkKFwicHVibGljL2ltYWdlcy9zcGhlcmUgKDIpLmpwZ1wiLGZ1bmN0aW9uKHRleHR1cmUpe1xyXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtcclxuICAgIFx0XHRcdG1hcDogdGV4dHVyZVxyXG4gICAgXHRcdH0pO1xyXG5cclxuICAgIFx0XHR2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcclxuICAgICAgICAgICAgbWVzaC5wb3NpdGlvbi5zZXQoMCwwLDEwKVxyXG4gICAgXHRcdHNlbGYuc2NlbmUuYWRkKCBtZXNoICk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHBsYWNlUGllY2VzKCkge1xyXG5cclxuICAgICAgICB0aGlzLmNvbHVtbk51bWJlciA9IDRcclxuICAgICAgICB0aGlzLnBpZWNlTnVtYmVyID0gdGhpcy5jb2x1bW5OdW1iZXIgKiB0aGlzLmNvbHVtbk51bWJlclxyXG4gICAgICAgIHRoaXMuc2NhbGVkV2lkdGggPSAxNlxyXG4gICAgICAgIHRoaXMuc2NhbGVkSGVpZ2h0ID0gOVxyXG4gICAgICAgIHRoaXMuZnJlZVBpZWNlTnVtYmVyID0gdGhpcy5waWVjZU51bWJlciAqIDEgLyAyXHJcbiAgICAgICAgdGhpcy5mcmVlUGllY2VMaXN0ID0gW11cclxuICAgICAgICB0aGlzLnBsYW5lV2lkdGggPSB0aGlzLnNjYWxlZFdpZHRoIC8gdGhpcy5jb2x1bW5OdW1iZXJcclxuICAgICAgICB0aGlzLnBsYW5lSGVpZ2h0ID0gdGhpcy5zY2FsZWRIZWlnaHQgLyB0aGlzLmNvbHVtbk51bWJlclxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbCAvL3RoZSBsYXN0IGNsaWNrZWQgbWVzaElkXHJcbiAgICAgICAgdGhpcy5ob2xkTWFwID0ge31cclxuICAgICAgICB0aGlzLm1lc2hDYW52YXNNYXAgPSB7fVxyXG4gICAgICAgIGxldCBpbWFnZU9iaiA9IG5ldyBJbWFnZSgpXHJcbiAgICAgICAgaW1hZ2VPYmouc3JjID0gcmVxdWlyZShcIi4uLy4uL3B1YmxpYy9pbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGdcIilcclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKVxyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxyXG4gICAgICAgIGxldCBzZWxmID0gdGhpc1xyXG4gICAgICAgIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBsZXQgd3MgPSAoY2FudmFzLndpZHRoICkgLyBpbWFnZU9iai53aWR0aFxyXG4gICAgICAgICAgICAvLyBsZXQgaHMgPSAoY2FudmFzLmhlaWdodCkgLyBpbWFnZU9iai5oZWlnaHRcclxuICAgICAgICAgICAgLy8gc2VsZi5zY2FsZSA9IE1hdGgubWluKHdzLCBocylcclxuICAgICAgICAgICAgc2VsZi5waWVjZVdpZHRoID0gaW1hZ2VPYmoud2lkdGggLyBzZWxmLmNvbHVtbk51bWJlclxyXG4gICAgICAgICAgICBzZWxmLnBpZWNlSGVpZ2h0ID0gaW1hZ2VPYmouaGVpZ2h0IC8gc2VsZi5jb2x1bW5OdW1iZXJcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGluZGV4ID0gMCwgdGV4dHVyZSwgbWF0ZXJpYWwsIG1lc2g7IGkgPCBzZWxmLmNvbHVtbk51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNlbGYuY29sdW1uTnVtYmVyOyBqKyssIGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoY2FudmFzKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlT2JqLCBpICogc2VsZi5waWVjZVdpZHRoLCBqICogc2VsZi5waWVjZUhlaWdodCwgc2VsZi5waWVjZVdpZHRoLCBzZWxmLnBpZWNlSGVpZ2h0LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmUpIC8vIGNoZWNrcyBpZiB0ZXh0dXJlIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogdGV4dHVyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNlbGYucGxhbmVXaWR0aCwgc2VsZi5wbGFuZUhlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSg1MCw1MCw1MCwwLE1hdGguUEkvMTYsTWF0aC5QSS8yLE1hdGguUEkvMjQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmRvbSA9IE1hdGgucmFuZG9tKClcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZG9tIDwgc2VsZi5mcmVlUGllY2VOdW1iZXIgLyAoc2VsZi5jb2x1bW5OdW1iZXIgKiBzZWxmLmNvbHVtbk51bWJlciAtIGluZGV4KSAmJiBzZWxmLmZyZWVQaWVjZU51bWJlciA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKHNlbGYuYm94U2l6ZSAtIHNlbGYucGxhbmVXaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHogPSAtc2VsZi5ib3hTaXplIC8gMiArIHNlbGYucGxhbmVIZWlnaHQgLyAyICsgTWF0aC5yYW5kb20oKSAqIChzZWxmLmJveFNpemUgLSBzZWxmLnBsYW5lSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJIC8gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChNYXRoLnJvdW5kKHgpLCAwLjUsIE1hdGgucm91bmQoeikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibGFua01lc2ggPSBtZXNoLmNsb25lKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob2xkTWFwW21lc2guaWRdID0gYmxhbmtNZXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsYW5rTWVzaC5yb3RhdGlvbi54ID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IDB4ODA4MDgwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibGFua01lc2gucG9zaXRpb24uc2V0KGkqc2VsZi5wbGFuZVdpZHRoIC0gc2VsZi5zY2FsZWRXaWR0aCAvIDIgKyBzZWxmLnBsYW5lV2lkdGggLyAyLCA1ICsgc2VsZi5zY2FsZWRIZWlnaHQgLSBzZWxmLnBsYW5lSGVpZ2h0IC8gMiAtIGogKiBzZWxmLnBsYW5lSGVpZ2h0LCAtOS45OSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2VuZS5hZGQoYmxhbmtNZXNoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmZyZWVQaWVjZU51bWJlci0tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZnJlZVBpZWNlTGlzdC5wdXNoKG1lc2guaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaENhbnZhc01hcFttZXNoLmlkXSA9IGNhbnZhc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gucG9zaXRpb24uc2V0KGkgKiBzZWxmLnBsYW5lV2lkdGggLSBzZWxmLnNjYWxlZFdpZHRoIC8gMiArIHNlbGYucGxhbmVXaWR0aCAvIDIsIDUgKyBzZWxmLnNjYWxlZEhlaWdodCAtIHNlbGYucGxhbmVIZWlnaHQgLyAyIC0gaiAqIHNlbGYucGxhbmVIZWlnaHQsIC05Ljk5KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBtZXNoLnBvc2l0aW9uLnNldCgwLCAyLC05KVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWVzaExpc3QucHVzaChtZXNoKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2NlbmUuYWRkKG1lc2gpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHR5cGVvZiB0aGlzLnNjZW5lKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKHRpbWVzdGFtcCkge1xyXG4gICAgICAgIC8vIHZhciBkZWx0YSA9IE1hdGgubWluKHRpbWVzdGFtcCAtIHRoaXMubGFzdFJlbmRlciwgNTAwKVxyXG4gICAgICAgIHRoaXMubGFzdFJlbmRlciA9IHRpbWVzdGFtcFxyXG4gICAgICAgICAgICAvL+WkhOeQhum8oOagh+eCueWHu1xyXG4gICAgICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5tb3VzZSwgdGhpcy5jYW1lcmEpXHJcbiAgICAgICAgbGV0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMuc2NlbmUuY2hpbGRyZW4pXHJcbiAgICAgICAgdGhpcy5tb3VzZS54ID0gdGhpcy5tb3VzZS55ID0gdW5kZWZpbmVkXHJcbiAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbnRlcnNlY3RzKVxyXG4gICAgICAgICAgICBsZXQgY2xpY2tGbGFnID0gZmFsc2VcclxuICAgICAgICAgICAgZm9yIChsZXQgbWVzaCBvZiB0aGlzLm1lc2hMaXN0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJlZVBpZWNlTGlzdC5pbmRleE9mKG1lc2guaWQpID4gLTEgJiYgbWVzaC5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRNZXNoIT09bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDYW52YXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC52aXNpYmxlID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaCA9IG1lc2hcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlLnBpY2tCdG4uaW5uZXJIVE1MID0gXCLotLTkuIpcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRmxhZyA9IHRydWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzaC52aXNpYmxlID0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKS5hcHBlbmRDaGlsZCh0aGlzLm1lc2hDYW52YXNNYXBbbWVzaC5pZF0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZE1lc2ggJiYgdGhpcy5ob2xkTWFwW3RoaXMuc2VsZWN0ZWRNZXNoLmlkXS5pZCA9PSBpbnRlcnNlY3RzWzBdLm9iamVjdC5pZCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGludGVyc2VjdHNbMF0ub2JqZWN0LnBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC5wb3NpdGlvbi5zZXQodC54LHQueSx0LnopXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTWVzaC5yb3RhdGlvbi5zZXQoMCwwLDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvbGRNYXBbdGhpcy5zZWxlY3RlZE1lc2guaWRdLnBvc2l0aW9uLnogLT0gMVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE1lc2gudmlzaWJsZSA9IHRydWVcclxuICAgICAgICAgICAgICAgIHRoaXMubW91c2UucGlja0J0bi5pbm5lckhUTUwgPSBcIuaNoei1t1wiXHJcbiAgICAgICAgICAgICAgICAvL+WcqOacquaLvOaIkOWbvueJh+WIl+ihqOS4reWPluWHuuW9k+WJjemhuVxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmVlUGllY2VMaXN0LnNwbGljZSh0aGlzLmZyZWVQaWVjZUxpc3QuaW5kZXhPZih0aGlzLnNlbGVjdGVkTWVzaC5pZCksMSlcclxuICAgICAgICAgICAgICAgIC8v5riF5qWa5b2T5YmN6YCJ5Y+W55qE5Zu+5YOPXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5mcmVlUGllY2VMaXN0Lmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBzd2FsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6XCLmga3llpzvvIFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCLmiJDlip/mi7zlrozkuobkuIDlvKDlm77vvIzlj6/mmK/miJHkuZ/kuI3kvJrnu5nkvaDmtYHph49cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi5aW955qEXCJcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRNZXNoICYmICFjbGlja0ZsYWcpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZS5waWNrQnRuLmlubmVySFRNTCA9IFwi5o2h6LW3XCJcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoLnZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKClcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRNZXNoID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZSgpXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSx0aGlzLmNhbWVyYSlcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZW5kZXIpXHJcbiAgICB9XHJcbiAgICBvblJlc2l6ZShlKSB7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblx0XHR0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblx0XHR0aGlzLnJlbmRlcmVyLnNldFNpemUoIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQgKTtcclxuICAgIH1cclxuICAgIGNsZWFyQ2FudmFzKCl7XHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKVxyXG4gICAgICAgIGxldCBwaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpblwiKVxyXG4gICAgICAgIHdoaWxlKGNhbnZhcyE9bnVsbCl7XHJcbiAgICAgICAgICAgIHBpbi5yZW1vdmVDaGlsZChjYW52YXMpXHJcbiAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGluIGNhbnZhc1wiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qYXZhc2NyaXB0cy9nYW1lLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW91c2UgZXh0ZW5kcyBUSFJFRS5WZWN0b3Iye1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG4gICAgICAgIHRoaXMueCA9IHVuZGVmaW5lZFxyXG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImNsaWNrXCIsIHRoaXMub25Nb3VzZUNsaWNrLmJpbmQodGhpcyksIGZhbHNlIClcclxuICAgICAgICB0aGlzLnBpY2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpY2stYnRuXCIpXHJcbiAgICAgICAgdGhpcy5waWNrSGFuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGljay1oYW5kXCIpXHJcbiAgICAgICAgdGhpcy5waWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMuYnRuT25DbGljay5iaW5kKHRoaXMpLGZhbHNlKVxyXG4gICAgICAgIC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLm9uTW91c2VDbGljay5iaW5kKHRoaXMpLGZhbHNlKVxyXG4gICAgfVxyXG4gICAgb25Nb3VzZUNsaWNrKCBldmVudCApIHtcclxuICAgICAgICB0aGlzLnggPSAoIGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCApICogMiAtIDFcclxuICAgICAgICB0aGlzLnkgPSAtICggZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCApICogMiArIDFcclxuICAgIH1cclxuICAgIGJ0bk9uQ2xpY2soIGV2ZW50ICkge1xyXG4gICAgICAgIHRoaXMueCA9ICggMC40NiApICogMiAtIDFcclxuICAgICAgICB0aGlzLnkgPSAtICggMC4zOTUgKSAqIDIgKyAxXHJcbiAgICB9XHJcbn1cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvamF2YXNjcmlwdHMvbW91c2UuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvcHV6emxlcy9jYXJ0b29uICgzKS5qcGdcIjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vcHVibGljL2ltYWdlcy9wdXp6bGVzL2NhcnRvb24gKDMpLmpwZ1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gc3dhbDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwic3dhbFwiXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwgXCJ0cnVlXCJcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9