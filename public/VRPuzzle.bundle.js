!function(e){function t(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=u.p+""+e+"."+g+".hot-update.js",t.appendChild(n)}function n(e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var t=new XMLHttpRequest,n=u.p+""+g+".hot-update.json";t.open("GET",n,!0),t.timeout=1e4,t.send(null)}catch(i){return e(i)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)e(new Error("Manifest request to "+n+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)e(new Error("Manifest request to "+n+" failed."));else{try{var i=JSON.parse(t.responseText)}catch(r){return void e(r)}e(null,i)}}}function i(e){function t(e,t){"ready"===M&&s("prepare"),P++,u.e(e,function(){function n(){P--,"prepare"===M&&(T[e]||l(e),0===P&&0===O&&d())}try{t.call(null,i)}finally{n()}})}var n=j[e];if(!n)return u;var i=function(t){return n.hot.active?j[t]?(j[t].parents.indexOf(e)<0&&j[t].parents.push(e),n.children.indexOf(t)<0&&n.children.push(t)):H=[e]:(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),H=[]),u(t)};for(var r in u)Object.prototype.hasOwnProperty.call(u,r)&&(f?Object.defineProperty(i,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return u[e]},set:function(t){u[e]=t}}}(r)):i[r]=u[r]);return f?Object.defineProperty(i,"e",{enumerable:!0,value:t}):i.e=t,i}function r(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(e,n){if("undefined"==typeof e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n;else t._acceptedDependencies[e]=n},decline:function(e){if("undefined"==typeof e)t._selfDeclined=!0;else if("number"==typeof e)t._declinedDependencies[e]=!0;else for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:a,apply:h,status:function(e){return e?void x.push(e):M},addStatusHandler:function(e){x.push(e)},removeStatusHandler:function(e){var t=x.indexOf(e);t>=0&&x.splice(t,1)},data:E[e]};return t}function s(e){M=e;for(var t=0;t<x.length;t++)x[t].call(null,e)}function o(e){var t=+e+""===e;return t?+e:e}function a(e,t){if("idle"!==M)throw new Error("check() is only allowed in idle status");"function"==typeof e?(w=!1,t=e):(w=e,t=t||function(e){if(e)throw e}),s("check"),n(function(e,n){if(e)return t(e);if(!n)return s("idle"),void t(null,null);R={},_={},T={};for(var i=0;i<n.c.length;i++)_[n.c[i]]=!0;b=n.h,s("prepare"),m=t,y={};var r=0;l(r),"prepare"===M&&0===P&&0===O&&d()})}function c(e,t){if(_[e]&&R[e]){R[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0===--O&&0===P&&d()}}function l(e){_[e]?(R[e]=!0,O++,t(e)):T[e]=!0}function d(){s("ready");var e=m;if(m=null,e)if(w)h(w,e);else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(o(n));e(null,t)}}function h(t,n){function i(e){for(var t=[e],n={},i=t.slice();i.length>0;){var s=i.pop(),e=j[s];if(e&&!e.hot._selfAccepted){if(e.hot._selfDeclined)return new Error("Aborted because of self decline: "+s);if(0===s)return;for(var o=0;o<e.parents.length;o++){var a=e.parents[o],c=j[a];if(c.hot._declinedDependencies[s])return new Error("Aborted because of declined dependency: "+s+" in "+a);t.indexOf(a)>=0||(c.hot._acceptedDependencies[s]?(n[a]||(n[a]=[]),r(n[a],[s])):(delete n[a],t.push(a),i.push(a)))}}}return[t,n]}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];e.indexOf(i)<0&&e.push(i)}}if("ready"!==M)throw new Error("apply() is only allowed in ready status");"function"==typeof t?(n=t,t={}):t&&"object"==typeof t?n=n||function(e){if(e)throw e}:(t={},n=n||function(e){if(e)throw e});var a={},c=[],l={};for(var d in y)if(Object.prototype.hasOwnProperty.call(y,d)){var h=o(d),p=i(h);if(!p){if(t.ignoreUnaccepted)continue;return s("abort"),n(new Error("Aborted because "+h+" is not accepted"))}if(p instanceof Error)return s("abort"),n(p);l[h]=y[h],r(c,p[0]);for(var h in p[1])Object.prototype.hasOwnProperty.call(p[1],h)&&(a[h]||(a[h]=[]),r(a[h],p[1][h]))}for(var f=[],v=0;v<c.length;v++){var h=c[v];j[h]&&j[h].hot._selfAccepted&&f.push({module:h,errorHandler:j[h].hot._selfAccepted})}s("dispose");for(var m=c.slice();m.length>0;){var h=m.pop(),w=j[h];if(w){for(var x={},O=w.hot._disposeHandlers,P=0;P<O.length;P++){var T=O[P];T(x)}E[h]=x,w.hot.active=!1,delete j[h];for(var P=0;P<w.children.length;P++){var R=j[w.children[P]];if(R){var _=R.parents.indexOf(h);_>=0&&R.parents.splice(_,1)}}}}for(var h in a)if(Object.prototype.hasOwnProperty.call(a,h))for(var w=j[h],k=a[h],P=0;P<k.length;P++){var S=k[P],_=w.children.indexOf(S);_>=0&&w.children.splice(_,1)}s("apply"),g=b;for(var h in l)Object.prototype.hasOwnProperty.call(l,h)&&(e[h]=l[h]);var z=null;for(var h in a)if(Object.prototype.hasOwnProperty.call(a,h)){for(var w=j[h],k=a[h],L=[],v=0;v<k.length;v++){var S=k[v],T=w.hot._acceptedDependencies[S];L.indexOf(T)>=0||L.push(T)}for(var v=0;v<L.length;v++){var T=L[v];try{T(a)}catch(C){z||(z=C)}}}for(var v=0;v<f.length;v++){var W=f[v],h=W.module;H=[h];try{u(h)}catch(C){if("function"==typeof W.errorHandler)try{W.errorHandler(C)}catch(C){z||(z=C)}else z||(z=C)}}return z?(s("fail"),n(z)):(s("idle"),void n(null,c))}function u(t){if(j[t])return j[t].exports;var n=j[t]={exports:{},id:t,loaded:!1,hot:r(t),parents:H,children:[]};return e[t].call(n.exports,n,n.exports,i(t)),n.loaded=!0,n.exports}var p=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){c(e,t),p&&p(e,t)};var f=!1;try{Object.defineProperty({},"x",{get:function(){}}),f=!0}catch(v){}var m,y,b,w=!0,g="4eefe348a7920c1059b2",E={},H=[],x=[],M="idle",O=0,P=0,T={},R={},_={},j={};return u.m=e,u.c=j,u.p="/VRPuzzle/public/",u.h=function(){return g},i(0)(0)}([function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=n(1),s=i(r),o=new s["default"],a=function(){o.render()};a()},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(2),a=i(o),c=n(4),l=i(c),d=function(){function e(){r(this,e),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e4),this.camera.position.set(0,10,0),this.controls=new THREE.DeviceOrientationControls(this.camera),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="absolute",this.renderer.domElement.style.top=0,document.body.appendChild(this.renderer.domElement),this.raycaster=new THREE.Raycaster,this.mouse=new a["default"],this.onTextureLoaded=this.onTextureLoaded.bind(this),this.onResize=this.onResize.bind(this),this.render=this.render.bind(this),this.placePieces=this.placePieces.bind(this),this.meshList=[],this.logFlag=!0,this.boxSize=30,this.onTextureLoaded(),window.addEventListener("resize",this.onResize,!0),this.lastRender=0,this.display=null}return s(e,[{key:"onTextureLoaded",value:function(){var e=new THREE.BoxGeometry(this.boxSize,this.boxSize,this.boxSize),t=new THREE.MeshBasicMaterial({color:16711935,side:THREE.BackSide,wireframe:!0});this.skybox=new THREE.Mesh(e,t),this.skybox.position.y=this.boxSize/2,this.scene.add(this.skybox),this.placePieces(),this.placeSphere()}},{key:"placeSphere",value:function(){var e=new THREE.SphereGeometry(50,16,8);e.scale(-1,1,1);var t=new THREE.TextureLoader,n=this;t.load("public/images/sphere (2).jpg",function(t){var i=new THREE.MeshBasicMaterial({map:t}),r=new THREE.Mesh(e,i);console.log(r),r.position.set(0,0,10),n.scene.add(r)})}},{key:"placePieces",value:function(){this.columnNumber=4,this.pieceNumber=this.columnNumber*this.columnNumber,this.scaledWidth=16,this.scaledHeight=9,this.freePieceNumber=1*this.pieceNumber/2,this.freePieceList=[],this.planeWidth=this.scaledWidth/this.columnNumber,this.planeHeight=this.scaledHeight/this.columnNumber,this.selectedMesh=null,this.holdMap={},this.meshCanvasMap={};var e=new Image;e.src=n(3);var t=document.createElement("canvas"),i=t.getContext("2d"),r=t.width/1.5/e.width,s=t.height/1.5/e.height;this.scale=Math.min(r,s),this.pieceWidth=e.width/this.columnNumber,this.pieceHeight=e.height/this.columnNumber;var o=this;e.onload=function(){for(var n,r,s,a=0,c=0;a<o.columnNumber;a++)for(var l=0;l<o.columnNumber;l++,c++){t=document.createElement("canvas"),i=t.getContext("2d"),n=new THREE.Texture(t),i.drawImage(e,a*o.pieceWidth,l*o.pieceHeight,o.pieceWidth,o.pieceHeight,0,0,t.width,t.height),n&&(n.needsUpdate=!0),r=new THREE.MeshBasicMaterial({map:n,side:THREE.DoubleSide}),r.transparent=!1,s=new THREE.Mesh(new THREE.PlaneGeometry(o.planeWidth,o.planeHeight),r);var d=Math.random();if(d<o.freePieceNumber/(o.columnNumber*o.columnNumber-c)&&o.freePieceNumber>0){var h=-o.boxSize/2+o.planeWidth/2+Math.random()*(o.boxSize-o.planeWidth),u=-o.boxSize/2+o.planeHeight/2+Math.random()*(o.boxSize-o.planeHeight);s.rotation.x=Math.PI/2,s.position.set(Math.round(h),.5,Math.round(u));var p=s.clone();o.holdMap[s.id]=p,p.rotation.x=0,p.material=new THREE.MeshBasicMaterial({color:8421504,side:THREE.DoubleSide}),p.position.set(a*o.planeWidth-o.scaledWidth/2+o.planeWidth/2,5+o.scaledHeight-o.planeHeight/2-l*o.planeHeight,-9.99),o.scene.add(p),o.freePieceNumber--,o.freePieceList.push(s.id),o.meshCanvasMap[s.id]=t}else s.position.set(a*o.planeWidth-o.scaledWidth/2+o.planeWidth/2,5+o.scaledHeight-o.planeHeight/2-l*o.planeHeight,-9.99);o.meshList.push(s),o.scene.add(s)}},(0,l["default"])({title:"提示",text:"把屏幕中央的小手对准地上的图片，点击按钮捡起，再把图片对准原图位置，点击贴上",confirmButtonText:"好的"})}},{key:"render",value:function(e){this.lastRender=e,this.raycaster.setFromCamera(this.mouse,this.camera);var t=this.raycaster.intersectObjects(this.scene.children);if(this.mouse.x=this.mouse.y=void 0,t.length>0){console.log(t);var n=!1,i=!0,r=!1,s=void 0;try{for(var o,a=this.meshList[Symbol.iterator]();!(i=(o=a.next()).done);i=!0){var c=o.value;this.freePieceList.indexOf(c.id)>-1&&c.id==t[0].object.id&&(null!==this.selectedMesh&&(this.clearCanvas(),this.selectedMesh.visible=!0),this.selectedMesh=c,this.mouse.pickBtn.innerHTML="贴上",n=!0,c.visible=!1,document.getElementById("pin").appendChild(this.meshCanvasMap[c.id]))}}catch(d){r=!0,s=d}finally{try{!i&&a["return"]&&a["return"]()}finally{if(r)throw s}}if(this.selectedMesh&&this.holdMap[this.selectedMesh.id].id==t[0].object.id){var h=t[0].object.position;this.selectedMesh.position.set(h.x,h.y,h.z),this.selectedMesh.rotation.set(0,0,0),this.holdMap[this.selectedMesh.id].position.z-=1,this.selectedMesh.visible=!0,this.mouse.pickBtn.innerHTML="捡起",this.freePieceList.splice(this.freePieceList.indexOf(this.selectedMesh.id),1),this.clearCanvas(),this.selectedMesh=null,0==this.freePieceList.length&&(0,l["default"])({title:"恭喜！",text:"成功拼完了一张图，可是我也不会给你流量",confirmButtonText:"好的"})}this.selectedMesh&&!n&&(this.mouse.pickBtn.innerHTML="捡起",this.selectedMesh.visible=!0,this.clearCanvas(),this.selectedMesh=null)}this.controls.update(),this.renderer.render(this.scene,this.camera),requestAnimationFrame(this.render)}},{key:"onResize",value:function(e){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}},{key:"clearCanvas",value:function(){for(var e=document.querySelector("#pin canvas"),t=document.getElementById("pin");e;)t.removeChild(e),e=document.querySelector("#pin canvas")}}]),e}();t["default"]=d},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(e){function t(e){n(this,t);var r=i(this,Object.getPrototypeOf(t).call(this,e));return r.x=void 0,r.y=void 0,r.pickBtn=document.getElementById("pick-btn"),r.pickHand=document.getElementById("pick-hand"),r.pickBtn.addEventListener("click",r.btnOnClick.bind(r),!1),r}return r(t,e),s(t,[{key:"onMouseClick",value:function(e){this.x=e.clientX/window.innerWidth*2-1,this.y=2*-(e.clientY/window.innerHeight)+1}},{key:"btnOnClick",value:function(e){this.x=.92-1,this.y=-.79+1}}]),t}(THREE.Vector2);t["default"]=o},function(e,t,n){e.exports=n.p+"images/puzzles/cartoon (5).jpg"},function(e,t){e.exports=swal}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,